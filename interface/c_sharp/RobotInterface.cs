// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RobotInterface.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RobotInterface {

  /// <summary>Holder for reflection information generated from RobotInterface.proto</summary>
  public static partial class RobotInterfaceReflection {

    #region Descriptor
    /// <summary>File descriptor for RobotInterface.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotInterfaceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRSb2JvdEludGVyZmFjZS5wcm90bxIPcm9ib3RfaW50ZXJmYWNlImYKBEF4",
            "aXMSDgoGYXhpc18xGAEgASgBEg4KBmF4aXNfMhgCIAEoARIOCgZheGlzXzMY",
            "AyABKAESDgoGYXhpc180GAQgASgBEg4KBmF4aXNfNRgFIAEoARIOCgZheGlz",
            "XzYYBiABKAEihwUKCFVwc3RyZWFtEjYKCG1lc3NhZ2VzGAEgAygLMiQucm9i",
            "b3RfaW50ZXJmYWNlLlVwc3RyZWFtLk9uZU1lc3NhZ2UaTAoRRGV2aWNlRGVz",
            "Y3JpcHRpb24SDAoEbmFtZRgBIAEoCRIpCgR0eXBlGAIgASgOMhsucm9ib3Rf",
            "aW50ZXJmYWNlLkRldmljZVR5cGUaTgoOVmFsdWVzUm9ib3RBcm0SIwoEYXhp",
            "cxgBIAEoCzIVLnJvYm90X2ludGVyZmFjZS5BeGlzEhcKD2F4aXNfcXVldWVf",
            "c2l6ZRgCIAEoBRoiChFWYWx1ZXNMaWdodFNlbnNvchINCgVsaWdodBgBIAEo",
            "ARrJAgoKT25lTWVzc2FnZRIdChV0YXJnZXRfZGV2aWNlX2FkZHJlc3MYASAB",
            "KA0SSQoSZGV2aWNlX2Rlc2NyaXB0aW9uGAIgASgLMisucm9ib3RfaW50ZXJm",
            "YWNlLlVwc3RyZWFtLkRldmljZURlc2NyaXB0aW9uSAASRAoQdmFsdWVzX3Jv",
            "Ym90X2FybRgDIAEoCzIoLnJvYm90X2ludGVyZmFjZS5VcHN0cmVhbS5WYWx1",
            "ZXNSb2JvdEFybUgAEkoKE3ZhbHVlc19saWdodF9zZW5zb3IYBCABKAsyKy5y",
            "b2JvdF9pbnRlcmZhY2UuVXBzdHJlYW0uVmFsdWVzTGlnaHRTZW5zb3JIABIw",
            "CgVlcnJvchgFIAEoDjIfLnJvYm90X2ludGVyZmFjZS5VcHN0cmVhbS5FcnJv",
            "ckgAQg0KC3N1Yl9tZXNzYWdlIjUKBUVycm9yEggKBE5PTkUQABIiCh5ST0JP",
            "VF9BUk1fRkFJTEVEX1RPX1JFQUNIX0FYSVMQASL3AwoKRG93bnN0cmVhbRI4",
            "CghtZXNzYWdlcxgBIAMoCzImLnJvYm90X2ludGVyZmFjZS5Eb3duc3RyZWFt",
            "Lk9uZU1lc3NhZ2UaJwoNUmVxdWVzdFZhbHVlcxIWCg5yZXF1ZXN0X3ZhbHVl",
            "cxgBIAEoCBo9Cg9TZXRBeGlzUm9ib3RBcm0SKgoLdGFyZ2V0X2F4aXMYASAB",
            "KAsyFS5yb2JvdF9pbnRlcmZhY2UuQXhpcxopChJDbGVhclF1ZXVlUm9ib3RB",
            "cm0SEwoLY2xlYXJfcXVldWUYASABKAgamwIKCk9uZU1lc3NhZ2USHQoVdGFy",
            "Z2V0X2RldmljZV9hZGRyZXNzGAEgASgNEkMKDnJlcXVlc3RfdmFsdWVzGAIg",
            "ASgLMikucm9ib3RfaW50ZXJmYWNlLkRvd25zdHJlYW0uUmVxdWVzdFZhbHVl",
            "c0gAEkkKEnNldF9heGlzX3JvYm90X2FybRgDIAEoCzIrLnJvYm90X2ludGVy",
            "ZmFjZS5Eb3duc3RyZWFtLlNldEF4aXNSb2JvdEFybUgAEk8KFWNsZWFyX3F1",
            "ZXVlX3JvYm90X2FybRgEIAEoCzIuLnJvYm90X2ludGVyZmFjZS5Eb3duc3Ry",
            "ZWFtLkNsZWFyUXVldWVSb2JvdEFybUgAQg0KC3N1Yl9tZXNzYWdlKjYKCkRl",
            "dmljZVR5cGUSDQoJUk9CT1RfQVJNEAASEAoMTElHSFRfU0VOU09SEAESBwoD",
            "QUxMEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RobotInterface.DeviceType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Axis), global::RobotInterface.Axis.Parser, new[]{ "Axis1", "Axis2", "Axis3", "Axis4", "Axis5", "Axis6" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Upstream), global::RobotInterface.Upstream.Parser, new[]{ "Messages" }, null, new[]{ typeof(global::RobotInterface.Upstream.Types.Error) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Upstream.Types.DeviceDescription), global::RobotInterface.Upstream.Types.DeviceDescription.Parser, new[]{ "Name", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Upstream.Types.ValuesRobotArm), global::RobotInterface.Upstream.Types.ValuesRobotArm.Parser, new[]{ "Axis", "AxisQueueSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Upstream.Types.ValuesLightSensor), global::RobotInterface.Upstream.Types.ValuesLightSensor.Parser, new[]{ "Light" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Upstream.Types.OneMessage), global::RobotInterface.Upstream.Types.OneMessage.Parser, new[]{ "TargetDeviceAddress", "DeviceDescription", "ValuesRobotArm", "ValuesLightSensor", "Error" }, new[]{ "SubMessage" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Downstream), global::RobotInterface.Downstream.Parser, new[]{ "Messages" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Downstream.Types.RequestValues), global::RobotInterface.Downstream.Types.RequestValues.Parser, new[]{ "RequestValues_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Downstream.Types.SetAxisRobotArm), global::RobotInterface.Downstream.Types.SetAxisRobotArm.Parser, new[]{ "TargetAxis" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Downstream.Types.ClearQueueRobotArm), global::RobotInterface.Downstream.Types.ClearQueueRobotArm.Parser, new[]{ "ClearQueue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotInterface.Downstream.Types.OneMessage), global::RobotInterface.Downstream.Types.OneMessage.Parser, new[]{ "TargetDeviceAddress", "RequestValues", "SetAxisRobotArm", "ClearQueueRobotArm" }, new[]{ "SubMessage" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum DeviceType {
    [pbr::OriginalName("ROBOT_ARM")] RobotArm = 0,
    [pbr::OriginalName("LIGHT_SENSOR")] LightSensor = 1,
    [pbr::OriginalName("ALL")] All = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Shared types
  /// </summary>
  public sealed partial class Axis : pb::IMessage<Axis> {
    private static readonly pb::MessageParser<Axis> _parser = new pb::MessageParser<Axis>(() => new Axis());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Axis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RobotInterface.RobotInterfaceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Axis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Axis(Axis other) : this() {
      axis1_ = other.axis1_;
      axis2_ = other.axis2_;
      axis3_ = other.axis3_;
      axis4_ = other.axis4_;
      axis5_ = other.axis5_;
      axis6_ = other.axis6_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Axis Clone() {
      return new Axis(this);
    }

    /// <summary>Field number for the "axis_1" field.</summary>
    public const int Axis1FieldNumber = 1;
    private double axis1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis1 {
      get { return axis1_; }
      set {
        axis1_ = value;
      }
    }

    /// <summary>Field number for the "axis_2" field.</summary>
    public const int Axis2FieldNumber = 2;
    private double axis2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis2 {
      get { return axis2_; }
      set {
        axis2_ = value;
      }
    }

    /// <summary>Field number for the "axis_3" field.</summary>
    public const int Axis3FieldNumber = 3;
    private double axis3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis3 {
      get { return axis3_; }
      set {
        axis3_ = value;
      }
    }

    /// <summary>Field number for the "axis_4" field.</summary>
    public const int Axis4FieldNumber = 4;
    private double axis4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis4 {
      get { return axis4_; }
      set {
        axis4_ = value;
      }
    }

    /// <summary>Field number for the "axis_5" field.</summary>
    public const int Axis5FieldNumber = 5;
    private double axis5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis5 {
      get { return axis5_; }
      set {
        axis5_ = value;
      }
    }

    /// <summary>Field number for the "axis_6" field.</summary>
    public const int Axis6FieldNumber = 6;
    private double axis6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Axis6 {
      get { return axis6_; }
      set {
        axis6_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Axis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Axis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis1, other.Axis1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis2, other.Axis2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis3, other.Axis3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis4, other.Axis4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis5, other.Axis5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Axis6, other.Axis6)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis1);
      if (Axis2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis2);
      if (Axis3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis3);
      if (Axis4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis4);
      if (Axis5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis5);
      if (Axis6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Axis6);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis1 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Axis1);
      }
      if (Axis2 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Axis2);
      }
      if (Axis3 != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Axis3);
      }
      if (Axis4 != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Axis4);
      }
      if (Axis5 != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Axis5);
      }
      if (Axis6 != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Axis6);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis1 != 0D) {
        size += 1 + 8;
      }
      if (Axis2 != 0D) {
        size += 1 + 8;
      }
      if (Axis3 != 0D) {
        size += 1 + 8;
      }
      if (Axis4 != 0D) {
        size += 1 + 8;
      }
      if (Axis5 != 0D) {
        size += 1 + 8;
      }
      if (Axis6 != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Axis other) {
      if (other == null) {
        return;
      }
      if (other.Axis1 != 0D) {
        Axis1 = other.Axis1;
      }
      if (other.Axis2 != 0D) {
        Axis2 = other.Axis2;
      }
      if (other.Axis3 != 0D) {
        Axis3 = other.Axis3;
      }
      if (other.Axis4 != 0D) {
        Axis4 = other.Axis4;
      }
      if (other.Axis5 != 0D) {
        Axis5 = other.Axis5;
      }
      if (other.Axis6 != 0D) {
        Axis6 = other.Axis6;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Axis1 = input.ReadDouble();
            break;
          }
          case 17: {
            Axis2 = input.ReadDouble();
            break;
          }
          case 25: {
            Axis3 = input.ReadDouble();
            break;
          }
          case 33: {
            Axis4 = input.ReadDouble();
            break;
          }
          case 41: {
            Axis5 = input.ReadDouble();
            break;
          }
          case 49: {
            Axis6 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message from arm to cloud
  /// </summary>
  public sealed partial class Upstream : pb::IMessage<Upstream> {
    private static readonly pb::MessageParser<Upstream> _parser = new pb::MessageParser<Upstream>(() => new Upstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Upstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RobotInterface.RobotInterfaceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Upstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Upstream(Upstream other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Upstream Clone() {
      return new Upstream(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RobotInterface.Upstream.Types.OneMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::RobotInterface.Upstream.Types.OneMessage.Parser);
    private readonly pbc::RepeatedField<global::RobotInterface.Upstream.Types.OneMessage> messages_ = new pbc::RepeatedField<global::RobotInterface.Upstream.Types.OneMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RobotInterface.Upstream.Types.OneMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Upstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Upstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Upstream other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Upstream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Error {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("ROBOT_ARM_FAILED_TO_REACH_AXIS")] RobotArmFailedToReachAxis = 1,
      }

      /// <summary>
      /// Messages supported by all devices
      /// </summary>
      public sealed partial class DeviceDescription : pb::IMessage<DeviceDescription> {
        private static readonly pb::MessageParser<DeviceDescription> _parser = new pb::MessageParser<DeviceDescription>(() => new DeviceDescription());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeviceDescription> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Upstream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceDescription() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceDescription(DeviceDescription other) : this() {
          name_ = other.name_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceDescription Clone() {
          return new DeviceDescription(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::RobotInterface.DeviceType type_ = global::RobotInterface.DeviceType.RobotArm;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.DeviceType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeviceDescription);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeviceDescription other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type != global::RobotInterface.DeviceType.RobotArm) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Type != global::RobotInterface.DeviceType.RobotArm) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type != global::RobotInterface.DeviceType.RobotArm) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeviceDescription other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type != global::RobotInterface.DeviceType.RobotArm) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::RobotInterface.DeviceType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Messages for robot arm
      /// </summary>
      public sealed partial class ValuesRobotArm : pb::IMessage<ValuesRobotArm> {
        private static readonly pb::MessageParser<ValuesRobotArm> _parser = new pb::MessageParser<ValuesRobotArm>(() => new ValuesRobotArm());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValuesRobotArm> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Upstream.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesRobotArm() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesRobotArm(ValuesRobotArm other) : this() {
          axis_ = other.axis_ != null ? other.axis_.Clone() : null;
          axisQueueSize_ = other.axisQueueSize_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesRobotArm Clone() {
          return new ValuesRobotArm(this);
        }

        /// <summary>Field number for the "axis" field.</summary>
        public const int AxisFieldNumber = 1;
        private global::RobotInterface.Axis axis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Axis Axis {
          get { return axis_; }
          set {
            axis_ = value;
          }
        }

        /// <summary>Field number for the "axis_queue_size" field.</summary>
        public const int AxisQueueSizeFieldNumber = 2;
        private int axisQueueSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AxisQueueSize {
          get { return axisQueueSize_; }
          set {
            axisQueueSize_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValuesRobotArm);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValuesRobotArm other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Axis, other.Axis)) return false;
          if (AxisQueueSize != other.AxisQueueSize) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (axis_ != null) hash ^= Axis.GetHashCode();
          if (AxisQueueSize != 0) hash ^= AxisQueueSize.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (axis_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Axis);
          }
          if (AxisQueueSize != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AxisQueueSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (axis_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Axis);
          }
          if (AxisQueueSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AxisQueueSize);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValuesRobotArm other) {
          if (other == null) {
            return;
          }
          if (other.axis_ != null) {
            if (axis_ == null) {
              Axis = new global::RobotInterface.Axis();
            }
            Axis.MergeFrom(other.Axis);
          }
          if (other.AxisQueueSize != 0) {
            AxisQueueSize = other.AxisQueueSize;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (axis_ == null) {
                  Axis = new global::RobotInterface.Axis();
                }
                input.ReadMessage(Axis);
                break;
              }
              case 16: {
                AxisQueueSize = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Messages for light sensor
      /// </summary>
      public sealed partial class ValuesLightSensor : pb::IMessage<ValuesLightSensor> {
        private static readonly pb::MessageParser<ValuesLightSensor> _parser = new pb::MessageParser<ValuesLightSensor>(() => new ValuesLightSensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValuesLightSensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Upstream.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesLightSensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesLightSensor(ValuesLightSensor other) : this() {
          light_ = other.light_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValuesLightSensor Clone() {
          return new ValuesLightSensor(this);
        }

        /// <summary>Field number for the "light" field.</summary>
        public const int LightFieldNumber = 1;
        private double light_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Light {
          get { return light_; }
          set {
            light_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValuesLightSensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValuesLightSensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Light, other.Light)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Light != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Light);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Light != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Light);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Light != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValuesLightSensor other) {
          if (other == null) {
            return;
          }
          if (other.Light != 0D) {
            Light = other.Light;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Light = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class OneMessage : pb::IMessage<OneMessage> {
        private static readonly pb::MessageParser<OneMessage> _parser = new pb::MessageParser<OneMessage>(() => new OneMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OneMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Upstream.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage(OneMessage other) : this() {
          targetDeviceAddress_ = other.targetDeviceAddress_;
          switch (other.SubMessageCase) {
            case SubMessageOneofCase.DeviceDescription:
              DeviceDescription = other.DeviceDescription.Clone();
              break;
            case SubMessageOneofCase.ValuesRobotArm:
              ValuesRobotArm = other.ValuesRobotArm.Clone();
              break;
            case SubMessageOneofCase.ValuesLightSensor:
              ValuesLightSensor = other.ValuesLightSensor.Clone();
              break;
            case SubMessageOneofCase.Error:
              Error = other.Error;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage Clone() {
          return new OneMessage(this);
        }

        /// <summary>Field number for the "target_device_address" field.</summary>
        public const int TargetDeviceAddressFieldNumber = 1;
        private uint targetDeviceAddress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetDeviceAddress {
          get { return targetDeviceAddress_; }
          set {
            targetDeviceAddress_ = value;
          }
        }

        /// <summary>Field number for the "device_description" field.</summary>
        public const int DeviceDescriptionFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Upstream.Types.DeviceDescription DeviceDescription {
          get { return subMessageCase_ == SubMessageOneofCase.DeviceDescription ? (global::RobotInterface.Upstream.Types.DeviceDescription) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.DeviceDescription;
          }
        }

        /// <summary>Field number for the "values_robot_arm" field.</summary>
        public const int ValuesRobotArmFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Upstream.Types.ValuesRobotArm ValuesRobotArm {
          get { return subMessageCase_ == SubMessageOneofCase.ValuesRobotArm ? (global::RobotInterface.Upstream.Types.ValuesRobotArm) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.ValuesRobotArm;
          }
        }

        /// <summary>Field number for the "values_light_sensor" field.</summary>
        public const int ValuesLightSensorFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Upstream.Types.ValuesLightSensor ValuesLightSensor {
          get { return subMessageCase_ == SubMessageOneofCase.ValuesLightSensor ? (global::RobotInterface.Upstream.Types.ValuesLightSensor) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.ValuesLightSensor;
          }
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Upstream.Types.Error Error {
          get { return subMessageCase_ == SubMessageOneofCase.Error ? (global::RobotInterface.Upstream.Types.Error) subMessage_ : global::RobotInterface.Upstream.Types.Error.None; }
          set {
            subMessage_ = value;
            subMessageCase_ = SubMessageOneofCase.Error;
          }
        }

        private object subMessage_;
        /// <summary>Enum of possible cases for the "sub_message" oneof.</summary>
        public enum SubMessageOneofCase {
          None = 0,
          DeviceDescription = 2,
          ValuesRobotArm = 3,
          ValuesLightSensor = 4,
          Error = 5,
        }
        private SubMessageOneofCase subMessageCase_ = SubMessageOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubMessageOneofCase SubMessageCase {
          get { return subMessageCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSubMessage() {
          subMessageCase_ = SubMessageOneofCase.None;
          subMessage_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OneMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OneMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TargetDeviceAddress != other.TargetDeviceAddress) return false;
          if (!object.Equals(DeviceDescription, other.DeviceDescription)) return false;
          if (!object.Equals(ValuesRobotArm, other.ValuesRobotArm)) return false;
          if (!object.Equals(ValuesLightSensor, other.ValuesLightSensor)) return false;
          if (Error != other.Error) return false;
          if (SubMessageCase != other.SubMessageCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TargetDeviceAddress != 0) hash ^= TargetDeviceAddress.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.DeviceDescription) hash ^= DeviceDescription.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.ValuesRobotArm) hash ^= ValuesRobotArm.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.ValuesLightSensor) hash ^= ValuesLightSensor.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.Error) hash ^= Error.GetHashCode();
          hash ^= (int) subMessageCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TargetDeviceAddress != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(TargetDeviceAddress);
          }
          if (subMessageCase_ == SubMessageOneofCase.DeviceDescription) {
            output.WriteRawTag(18);
            output.WriteMessage(DeviceDescription);
          }
          if (subMessageCase_ == SubMessageOneofCase.ValuesRobotArm) {
            output.WriteRawTag(26);
            output.WriteMessage(ValuesRobotArm);
          }
          if (subMessageCase_ == SubMessageOneofCase.ValuesLightSensor) {
            output.WriteRawTag(34);
            output.WriteMessage(ValuesLightSensor);
          }
          if (subMessageCase_ == SubMessageOneofCase.Error) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Error);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TargetDeviceAddress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetDeviceAddress);
          }
          if (subMessageCase_ == SubMessageOneofCase.DeviceDescription) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceDescription);
          }
          if (subMessageCase_ == SubMessageOneofCase.ValuesRobotArm) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValuesRobotArm);
          }
          if (subMessageCase_ == SubMessageOneofCase.ValuesLightSensor) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValuesLightSensor);
          }
          if (subMessageCase_ == SubMessageOneofCase.Error) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OneMessage other) {
          if (other == null) {
            return;
          }
          if (other.TargetDeviceAddress != 0) {
            TargetDeviceAddress = other.TargetDeviceAddress;
          }
          switch (other.SubMessageCase) {
            case SubMessageOneofCase.DeviceDescription:
              if (DeviceDescription == null) {
                DeviceDescription = new global::RobotInterface.Upstream.Types.DeviceDescription();
              }
              DeviceDescription.MergeFrom(other.DeviceDescription);
              break;
            case SubMessageOneofCase.ValuesRobotArm:
              if (ValuesRobotArm == null) {
                ValuesRobotArm = new global::RobotInterface.Upstream.Types.ValuesRobotArm();
              }
              ValuesRobotArm.MergeFrom(other.ValuesRobotArm);
              break;
            case SubMessageOneofCase.ValuesLightSensor:
              if (ValuesLightSensor == null) {
                ValuesLightSensor = new global::RobotInterface.Upstream.Types.ValuesLightSensor();
              }
              ValuesLightSensor.MergeFrom(other.ValuesLightSensor);
              break;
            case SubMessageOneofCase.Error:
              Error = other.Error;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TargetDeviceAddress = input.ReadUInt32();
                break;
              }
              case 18: {
                global::RobotInterface.Upstream.Types.DeviceDescription subBuilder = new global::RobotInterface.Upstream.Types.DeviceDescription();
                if (subMessageCase_ == SubMessageOneofCase.DeviceDescription) {
                  subBuilder.MergeFrom(DeviceDescription);
                }
                input.ReadMessage(subBuilder);
                DeviceDescription = subBuilder;
                break;
              }
              case 26: {
                global::RobotInterface.Upstream.Types.ValuesRobotArm subBuilder = new global::RobotInterface.Upstream.Types.ValuesRobotArm();
                if (subMessageCase_ == SubMessageOneofCase.ValuesRobotArm) {
                  subBuilder.MergeFrom(ValuesRobotArm);
                }
                input.ReadMessage(subBuilder);
                ValuesRobotArm = subBuilder;
                break;
              }
              case 34: {
                global::RobotInterface.Upstream.Types.ValuesLightSensor subBuilder = new global::RobotInterface.Upstream.Types.ValuesLightSensor();
                if (subMessageCase_ == SubMessageOneofCase.ValuesLightSensor) {
                  subBuilder.MergeFrom(ValuesLightSensor);
                }
                input.ReadMessage(subBuilder);
                ValuesLightSensor = subBuilder;
                break;
              }
              case 40: {
                subMessage_ = input.ReadEnum();
                subMessageCase_ = SubMessageOneofCase.Error;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Message from cloud to arm
  /// </summary>
  public sealed partial class Downstream : pb::IMessage<Downstream> {
    private static readonly pb::MessageParser<Downstream> _parser = new pb::MessageParser<Downstream>(() => new Downstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Downstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RobotInterface.RobotInterfaceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Downstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Downstream(Downstream other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Downstream Clone() {
      return new Downstream(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RobotInterface.Downstream.Types.OneMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::RobotInterface.Downstream.Types.OneMessage.Parser);
    private readonly pbc::RepeatedField<global::RobotInterface.Downstream.Types.OneMessage> messages_ = new pbc::RepeatedField<global::RobotInterface.Downstream.Types.OneMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RobotInterface.Downstream.Types.OneMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Downstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Downstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Downstream other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Downstream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Messages supported by all devices
      /// </summary>
      public sealed partial class RequestValues : pb::IMessage<RequestValues> {
        private static readonly pb::MessageParser<RequestValues> _parser = new pb::MessageParser<RequestValues>(() => new RequestValues());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestValues> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Downstream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestValues() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestValues(RequestValues other) : this() {
          requestValues_ = other.requestValues_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestValues Clone() {
          return new RequestValues(this);
        }

        /// <summary>Field number for the "request_values" field.</summary>
        public const int RequestValues_FieldNumber = 1;
        private bool requestValues_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RequestValues_ {
          get { return requestValues_; }
          set {
            requestValues_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RequestValues);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestValues other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequestValues_ != other.RequestValues_) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequestValues_ != false) hash ^= RequestValues_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequestValues_ != false) {
            output.WriteRawTag(8);
            output.WriteBool(RequestValues_);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequestValues_ != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestValues other) {
          if (other == null) {
            return;
          }
          if (other.RequestValues_ != false) {
            RequestValues_ = other.RequestValues_;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequestValues_ = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Messages for robot arm
      /// </summary>
      public sealed partial class SetAxisRobotArm : pb::IMessage<SetAxisRobotArm> {
        private static readonly pb::MessageParser<SetAxisRobotArm> _parser = new pb::MessageParser<SetAxisRobotArm>(() => new SetAxisRobotArm());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetAxisRobotArm> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Downstream.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetAxisRobotArm() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetAxisRobotArm(SetAxisRobotArm other) : this() {
          targetAxis_ = other.targetAxis_ != null ? other.targetAxis_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetAxisRobotArm Clone() {
          return new SetAxisRobotArm(this);
        }

        /// <summary>Field number for the "target_axis" field.</summary>
        public const int TargetAxisFieldNumber = 1;
        private global::RobotInterface.Axis targetAxis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Axis TargetAxis {
          get { return targetAxis_; }
          set {
            targetAxis_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetAxisRobotArm);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetAxisRobotArm other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TargetAxis, other.TargetAxis)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetAxis_ != null) hash ^= TargetAxis.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetAxis_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TargetAxis);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetAxis_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetAxis);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetAxisRobotArm other) {
          if (other == null) {
            return;
          }
          if (other.targetAxis_ != null) {
            if (targetAxis_ == null) {
              TargetAxis = new global::RobotInterface.Axis();
            }
            TargetAxis.MergeFrom(other.TargetAxis);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (targetAxis_ == null) {
                  TargetAxis = new global::RobotInterface.Axis();
                }
                input.ReadMessage(TargetAxis);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClearQueueRobotArm : pb::IMessage<ClearQueueRobotArm> {
        private static readonly pb::MessageParser<ClearQueueRobotArm> _parser = new pb::MessageParser<ClearQueueRobotArm>(() => new ClearQueueRobotArm());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClearQueueRobotArm> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Downstream.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearQueueRobotArm() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearQueueRobotArm(ClearQueueRobotArm other) : this() {
          clearQueue_ = other.clearQueue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClearQueueRobotArm Clone() {
          return new ClearQueueRobotArm(this);
        }

        /// <summary>Field number for the "clear_queue" field.</summary>
        public const int ClearQueueFieldNumber = 1;
        private bool clearQueue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ClearQueue {
          get { return clearQueue_; }
          set {
            clearQueue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClearQueueRobotArm);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClearQueueRobotArm other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClearQueue != other.ClearQueue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ClearQueue != false) hash ^= ClearQueue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ClearQueue != false) {
            output.WriteRawTag(8);
            output.WriteBool(ClearQueue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ClearQueue != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClearQueueRobotArm other) {
          if (other == null) {
            return;
          }
          if (other.ClearQueue != false) {
            ClearQueue = other.ClearQueue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ClearQueue = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class OneMessage : pb::IMessage<OneMessage> {
        private static readonly pb::MessageParser<OneMessage> _parser = new pb::MessageParser<OneMessage>(() => new OneMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OneMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RobotInterface.Downstream.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage(OneMessage other) : this() {
          targetDeviceAddress_ = other.targetDeviceAddress_;
          switch (other.SubMessageCase) {
            case SubMessageOneofCase.RequestValues:
              RequestValues = other.RequestValues.Clone();
              break;
            case SubMessageOneofCase.SetAxisRobotArm:
              SetAxisRobotArm = other.SetAxisRobotArm.Clone();
              break;
            case SubMessageOneofCase.ClearQueueRobotArm:
              ClearQueueRobotArm = other.ClearQueueRobotArm.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMessage Clone() {
          return new OneMessage(this);
        }

        /// <summary>Field number for the "target_device_address" field.</summary>
        public const int TargetDeviceAddressFieldNumber = 1;
        private uint targetDeviceAddress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetDeviceAddress {
          get { return targetDeviceAddress_; }
          set {
            targetDeviceAddress_ = value;
          }
        }

        /// <summary>Field number for the "request_values" field.</summary>
        public const int RequestValuesFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Downstream.Types.RequestValues RequestValues {
          get { return subMessageCase_ == SubMessageOneofCase.RequestValues ? (global::RobotInterface.Downstream.Types.RequestValues) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.RequestValues;
          }
        }

        /// <summary>Field number for the "set_axis_robot_arm" field.</summary>
        public const int SetAxisRobotArmFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Downstream.Types.SetAxisRobotArm SetAxisRobotArm {
          get { return subMessageCase_ == SubMessageOneofCase.SetAxisRobotArm ? (global::RobotInterface.Downstream.Types.SetAxisRobotArm) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.SetAxisRobotArm;
          }
        }

        /// <summary>Field number for the "clear_queue_robot_arm" field.</summary>
        public const int ClearQueueRobotArmFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RobotInterface.Downstream.Types.ClearQueueRobotArm ClearQueueRobotArm {
          get { return subMessageCase_ == SubMessageOneofCase.ClearQueueRobotArm ? (global::RobotInterface.Downstream.Types.ClearQueueRobotArm) subMessage_ : null; }
          set {
            subMessage_ = value;
            subMessageCase_ = value == null ? SubMessageOneofCase.None : SubMessageOneofCase.ClearQueueRobotArm;
          }
        }

        private object subMessage_;
        /// <summary>Enum of possible cases for the "sub_message" oneof.</summary>
        public enum SubMessageOneofCase {
          None = 0,
          RequestValues = 2,
          SetAxisRobotArm = 3,
          ClearQueueRobotArm = 4,
        }
        private SubMessageOneofCase subMessageCase_ = SubMessageOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubMessageOneofCase SubMessageCase {
          get { return subMessageCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSubMessage() {
          subMessageCase_ = SubMessageOneofCase.None;
          subMessage_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OneMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OneMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TargetDeviceAddress != other.TargetDeviceAddress) return false;
          if (!object.Equals(RequestValues, other.RequestValues)) return false;
          if (!object.Equals(SetAxisRobotArm, other.SetAxisRobotArm)) return false;
          if (!object.Equals(ClearQueueRobotArm, other.ClearQueueRobotArm)) return false;
          if (SubMessageCase != other.SubMessageCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TargetDeviceAddress != 0) hash ^= TargetDeviceAddress.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.RequestValues) hash ^= RequestValues.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.SetAxisRobotArm) hash ^= SetAxisRobotArm.GetHashCode();
          if (subMessageCase_ == SubMessageOneofCase.ClearQueueRobotArm) hash ^= ClearQueueRobotArm.GetHashCode();
          hash ^= (int) subMessageCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TargetDeviceAddress != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(TargetDeviceAddress);
          }
          if (subMessageCase_ == SubMessageOneofCase.RequestValues) {
            output.WriteRawTag(18);
            output.WriteMessage(RequestValues);
          }
          if (subMessageCase_ == SubMessageOneofCase.SetAxisRobotArm) {
            output.WriteRawTag(26);
            output.WriteMessage(SetAxisRobotArm);
          }
          if (subMessageCase_ == SubMessageOneofCase.ClearQueueRobotArm) {
            output.WriteRawTag(34);
            output.WriteMessage(ClearQueueRobotArm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TargetDeviceAddress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetDeviceAddress);
          }
          if (subMessageCase_ == SubMessageOneofCase.RequestValues) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestValues);
          }
          if (subMessageCase_ == SubMessageOneofCase.SetAxisRobotArm) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetAxisRobotArm);
          }
          if (subMessageCase_ == SubMessageOneofCase.ClearQueueRobotArm) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearQueueRobotArm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OneMessage other) {
          if (other == null) {
            return;
          }
          if (other.TargetDeviceAddress != 0) {
            TargetDeviceAddress = other.TargetDeviceAddress;
          }
          switch (other.SubMessageCase) {
            case SubMessageOneofCase.RequestValues:
              if (RequestValues == null) {
                RequestValues = new global::RobotInterface.Downstream.Types.RequestValues();
              }
              RequestValues.MergeFrom(other.RequestValues);
              break;
            case SubMessageOneofCase.SetAxisRobotArm:
              if (SetAxisRobotArm == null) {
                SetAxisRobotArm = new global::RobotInterface.Downstream.Types.SetAxisRobotArm();
              }
              SetAxisRobotArm.MergeFrom(other.SetAxisRobotArm);
              break;
            case SubMessageOneofCase.ClearQueueRobotArm:
              if (ClearQueueRobotArm == null) {
                ClearQueueRobotArm = new global::RobotInterface.Downstream.Types.ClearQueueRobotArm();
              }
              ClearQueueRobotArm.MergeFrom(other.ClearQueueRobotArm);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TargetDeviceAddress = input.ReadUInt32();
                break;
              }
              case 18: {
                global::RobotInterface.Downstream.Types.RequestValues subBuilder = new global::RobotInterface.Downstream.Types.RequestValues();
                if (subMessageCase_ == SubMessageOneofCase.RequestValues) {
                  subBuilder.MergeFrom(RequestValues);
                }
                input.ReadMessage(subBuilder);
                RequestValues = subBuilder;
                break;
              }
              case 26: {
                global::RobotInterface.Downstream.Types.SetAxisRobotArm subBuilder = new global::RobotInterface.Downstream.Types.SetAxisRobotArm();
                if (subMessageCase_ == SubMessageOneofCase.SetAxisRobotArm) {
                  subBuilder.MergeFrom(SetAxisRobotArm);
                }
                input.ReadMessage(subBuilder);
                SetAxisRobotArm = subBuilder;
                break;
              }
              case 34: {
                global::RobotInterface.Downstream.Types.ClearQueueRobotArm subBuilder = new global::RobotInterface.Downstream.Types.ClearQueueRobotArm();
                if (subMessageCase_ == SubMessageOneofCase.ClearQueueRobotArm) {
                  subBuilder.MergeFrom(ClearQueueRobotArm);
                }
                input.ReadMessage(subBuilder);
                ClearQueueRobotArm = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
