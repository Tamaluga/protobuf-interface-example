// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotInterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotInterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotInterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotInterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotInterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotInterface_2eproto;
namespace robot_interface {
class Axis;
class AxisDefaultTypeInternal;
extern AxisDefaultTypeInternal _Axis_default_instance_;
class Downstream;
class DownstreamDefaultTypeInternal;
extern DownstreamDefaultTypeInternal _Downstream_default_instance_;
class Downstream_ClearQueueRobotArm;
class Downstream_ClearQueueRobotArmDefaultTypeInternal;
extern Downstream_ClearQueueRobotArmDefaultTypeInternal _Downstream_ClearQueueRobotArm_default_instance_;
class Downstream_OneMessage;
class Downstream_OneMessageDefaultTypeInternal;
extern Downstream_OneMessageDefaultTypeInternal _Downstream_OneMessage_default_instance_;
class Downstream_RequestValues;
class Downstream_RequestValuesDefaultTypeInternal;
extern Downstream_RequestValuesDefaultTypeInternal _Downstream_RequestValues_default_instance_;
class Downstream_SetAxisRobotArm;
class Downstream_SetAxisRobotArmDefaultTypeInternal;
extern Downstream_SetAxisRobotArmDefaultTypeInternal _Downstream_SetAxisRobotArm_default_instance_;
class Upstream;
class UpstreamDefaultTypeInternal;
extern UpstreamDefaultTypeInternal _Upstream_default_instance_;
class Upstream_DeviceDescription;
class Upstream_DeviceDescriptionDefaultTypeInternal;
extern Upstream_DeviceDescriptionDefaultTypeInternal _Upstream_DeviceDescription_default_instance_;
class Upstream_OneMessage;
class Upstream_OneMessageDefaultTypeInternal;
extern Upstream_OneMessageDefaultTypeInternal _Upstream_OneMessage_default_instance_;
class Upstream_ValuesLightSensor;
class Upstream_ValuesLightSensorDefaultTypeInternal;
extern Upstream_ValuesLightSensorDefaultTypeInternal _Upstream_ValuesLightSensor_default_instance_;
class Upstream_ValuesRobotArm;
class Upstream_ValuesRobotArmDefaultTypeInternal;
extern Upstream_ValuesRobotArmDefaultTypeInternal _Upstream_ValuesRobotArm_default_instance_;
}  // namespace robot_interface
PROTOBUF_NAMESPACE_OPEN
template<> ::robot_interface::Axis* Arena::CreateMaybeMessage<::robot_interface::Axis>(Arena*);
template<> ::robot_interface::Downstream* Arena::CreateMaybeMessage<::robot_interface::Downstream>(Arena*);
template<> ::robot_interface::Downstream_ClearQueueRobotArm* Arena::CreateMaybeMessage<::robot_interface::Downstream_ClearQueueRobotArm>(Arena*);
template<> ::robot_interface::Downstream_OneMessage* Arena::CreateMaybeMessage<::robot_interface::Downstream_OneMessage>(Arena*);
template<> ::robot_interface::Downstream_RequestValues* Arena::CreateMaybeMessage<::robot_interface::Downstream_RequestValues>(Arena*);
template<> ::robot_interface::Downstream_SetAxisRobotArm* Arena::CreateMaybeMessage<::robot_interface::Downstream_SetAxisRobotArm>(Arena*);
template<> ::robot_interface::Upstream* Arena::CreateMaybeMessage<::robot_interface::Upstream>(Arena*);
template<> ::robot_interface::Upstream_DeviceDescription* Arena::CreateMaybeMessage<::robot_interface::Upstream_DeviceDescription>(Arena*);
template<> ::robot_interface::Upstream_OneMessage* Arena::CreateMaybeMessage<::robot_interface::Upstream_OneMessage>(Arena*);
template<> ::robot_interface::Upstream_ValuesLightSensor* Arena::CreateMaybeMessage<::robot_interface::Upstream_ValuesLightSensor>(Arena*);
template<> ::robot_interface::Upstream_ValuesRobotArm* Arena::CreateMaybeMessage<::robot_interface::Upstream_ValuesRobotArm>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robot_interface {

enum Upstream_Error : int {
  Upstream_Error_NONE = 0,
  Upstream_Error_ROBOT_ARM_FAILED_TO_REACH_AXIS = 1,
  Upstream_Error_Upstream_Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Upstream_Error_Upstream_Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Upstream_Error_IsValid(int value);
constexpr Upstream_Error Upstream_Error_Error_MIN = Upstream_Error_NONE;
constexpr Upstream_Error Upstream_Error_Error_MAX = Upstream_Error_ROBOT_ARM_FAILED_TO_REACH_AXIS;
constexpr int Upstream_Error_Error_ARRAYSIZE = Upstream_Error_Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Upstream_Error_descriptor();
template<typename T>
inline const std::string& Upstream_Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Upstream_Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Upstream_Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Upstream_Error_descriptor(), enum_t_value);
}
inline bool Upstream_Error_Parse(
    const std::string& name, Upstream_Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Upstream_Error>(
    Upstream_Error_descriptor(), name, value);
}
enum DeviceType : int {
  ROBOT_ARM = 0,
  LIGHT_SENSOR = 1,
  ALL = 2,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = ROBOT_ARM;
constexpr DeviceType DeviceType_MAX = ALL;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor();
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_descriptor(), enum_t_value);
}
inline bool DeviceType_Parse(
    const std::string& name, DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class Axis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Axis) */ {
 public:
  inline Axis() : Axis(nullptr) {};
  virtual ~Axis();

  Axis(const Axis& from);
  Axis(Axis&& from) noexcept
    : Axis() {
    *this = ::std::move(from);
  }

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Axis& operator=(Axis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Axis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Axis* internal_default_instance() {
    return reinterpret_cast<const Axis*>(
               &_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Axis& a, Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(Axis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Axis* New() const final {
    return CreateMaybeMessage<Axis>(nullptr);
  }

  Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Axis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Axis& from);
  void MergeFrom(const Axis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Axis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Axis";
  }
  protected:
  explicit Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxis1FieldNumber = 1,
    kAxis2FieldNumber = 2,
    kAxis3FieldNumber = 3,
    kAxis4FieldNumber = 4,
    kAxis5FieldNumber = 5,
    kAxis6FieldNumber = 6,
  };
  // double axis_1 = 1;
  void clear_axis_1();
  double axis_1() const;
  void set_axis_1(double value);
  private:
  double _internal_axis_1() const;
  void _internal_set_axis_1(double value);
  public:

  // double axis_2 = 2;
  void clear_axis_2();
  double axis_2() const;
  void set_axis_2(double value);
  private:
  double _internal_axis_2() const;
  void _internal_set_axis_2(double value);
  public:

  // double axis_3 = 3;
  void clear_axis_3();
  double axis_3() const;
  void set_axis_3(double value);
  private:
  double _internal_axis_3() const;
  void _internal_set_axis_3(double value);
  public:

  // double axis_4 = 4;
  void clear_axis_4();
  double axis_4() const;
  void set_axis_4(double value);
  private:
  double _internal_axis_4() const;
  void _internal_set_axis_4(double value);
  public:

  // double axis_5 = 5;
  void clear_axis_5();
  double axis_5() const;
  void set_axis_5(double value);
  private:
  double _internal_axis_5() const;
  void _internal_set_axis_5(double value);
  public:

  // double axis_6 = 6;
  void clear_axis_6();
  double axis_6() const;
  void set_axis_6(double value);
  private:
  double _internal_axis_6() const;
  void _internal_set_axis_6(double value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double axis_1_;
  double axis_2_;
  double axis_3_;
  double axis_4_;
  double axis_5_;
  double axis_6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Upstream_DeviceDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Upstream.DeviceDescription) */ {
 public:
  inline Upstream_DeviceDescription() : Upstream_DeviceDescription(nullptr) {};
  virtual ~Upstream_DeviceDescription();

  Upstream_DeviceDescription(const Upstream_DeviceDescription& from);
  Upstream_DeviceDescription(Upstream_DeviceDescription&& from) noexcept
    : Upstream_DeviceDescription() {
    *this = ::std::move(from);
  }

  inline Upstream_DeviceDescription& operator=(const Upstream_DeviceDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upstream_DeviceDescription& operator=(Upstream_DeviceDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Upstream_DeviceDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upstream_DeviceDescription* internal_default_instance() {
    return reinterpret_cast<const Upstream_DeviceDescription*>(
               &_Upstream_DeviceDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Upstream_DeviceDescription& a, Upstream_DeviceDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(Upstream_DeviceDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upstream_DeviceDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upstream_DeviceDescription* New() const final {
    return CreateMaybeMessage<Upstream_DeviceDescription>(nullptr);
  }

  Upstream_DeviceDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upstream_DeviceDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Upstream_DeviceDescription& from);
  void MergeFrom(const Upstream_DeviceDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Upstream_DeviceDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Upstream.DeviceDescription";
  }
  protected:
  explicit Upstream_DeviceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .robot_interface.DeviceType type = 2;
  void clear_type();
  ::robot_interface::DeviceType type() const;
  void set_type(::robot_interface::DeviceType value);
  private:
  ::robot_interface::DeviceType _internal_type() const;
  void _internal_set_type(::robot_interface::DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Upstream.DeviceDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Upstream_ValuesRobotArm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Upstream.ValuesRobotArm) */ {
 public:
  inline Upstream_ValuesRobotArm() : Upstream_ValuesRobotArm(nullptr) {};
  virtual ~Upstream_ValuesRobotArm();

  Upstream_ValuesRobotArm(const Upstream_ValuesRobotArm& from);
  Upstream_ValuesRobotArm(Upstream_ValuesRobotArm&& from) noexcept
    : Upstream_ValuesRobotArm() {
    *this = ::std::move(from);
  }

  inline Upstream_ValuesRobotArm& operator=(const Upstream_ValuesRobotArm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upstream_ValuesRobotArm& operator=(Upstream_ValuesRobotArm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Upstream_ValuesRobotArm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upstream_ValuesRobotArm* internal_default_instance() {
    return reinterpret_cast<const Upstream_ValuesRobotArm*>(
               &_Upstream_ValuesRobotArm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Upstream_ValuesRobotArm& a, Upstream_ValuesRobotArm& b) {
    a.Swap(&b);
  }
  inline void Swap(Upstream_ValuesRobotArm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upstream_ValuesRobotArm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upstream_ValuesRobotArm* New() const final {
    return CreateMaybeMessage<Upstream_ValuesRobotArm>(nullptr);
  }

  Upstream_ValuesRobotArm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upstream_ValuesRobotArm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Upstream_ValuesRobotArm& from);
  void MergeFrom(const Upstream_ValuesRobotArm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Upstream_ValuesRobotArm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Upstream.ValuesRobotArm";
  }
  protected:
  explicit Upstream_ValuesRobotArm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kAxisQueueSizeFieldNumber = 2,
  };
  // .robot_interface.Axis axis = 1;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  const ::robot_interface::Axis& axis() const;
  ::robot_interface::Axis* release_axis();
  ::robot_interface::Axis* mutable_axis();
  void set_allocated_axis(::robot_interface::Axis* axis);
  private:
  const ::robot_interface::Axis& _internal_axis() const;
  ::robot_interface::Axis* _internal_mutable_axis();
  public:
  void unsafe_arena_set_allocated_axis(
      ::robot_interface::Axis* axis);
  ::robot_interface::Axis* unsafe_arena_release_axis();

  // int32 axis_queue_size = 2;
  void clear_axis_queue_size();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_queue_size() const;
  void set_axis_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_queue_size() const;
  void _internal_set_axis_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Upstream.ValuesRobotArm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_interface::Axis* axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_queue_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Upstream_ValuesLightSensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Upstream.ValuesLightSensor) */ {
 public:
  inline Upstream_ValuesLightSensor() : Upstream_ValuesLightSensor(nullptr) {};
  virtual ~Upstream_ValuesLightSensor();

  Upstream_ValuesLightSensor(const Upstream_ValuesLightSensor& from);
  Upstream_ValuesLightSensor(Upstream_ValuesLightSensor&& from) noexcept
    : Upstream_ValuesLightSensor() {
    *this = ::std::move(from);
  }

  inline Upstream_ValuesLightSensor& operator=(const Upstream_ValuesLightSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upstream_ValuesLightSensor& operator=(Upstream_ValuesLightSensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Upstream_ValuesLightSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upstream_ValuesLightSensor* internal_default_instance() {
    return reinterpret_cast<const Upstream_ValuesLightSensor*>(
               &_Upstream_ValuesLightSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Upstream_ValuesLightSensor& a, Upstream_ValuesLightSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Upstream_ValuesLightSensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upstream_ValuesLightSensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upstream_ValuesLightSensor* New() const final {
    return CreateMaybeMessage<Upstream_ValuesLightSensor>(nullptr);
  }

  Upstream_ValuesLightSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upstream_ValuesLightSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Upstream_ValuesLightSensor& from);
  void MergeFrom(const Upstream_ValuesLightSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Upstream_ValuesLightSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Upstream.ValuesLightSensor";
  }
  protected:
  explicit Upstream_ValuesLightSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLightFieldNumber = 1,
  };
  // double light = 1;
  void clear_light();
  double light() const;
  void set_light(double value);
  private:
  double _internal_light() const;
  void _internal_set_light(double value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Upstream.ValuesLightSensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double light_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Upstream_OneMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Upstream.OneMessage) */ {
 public:
  inline Upstream_OneMessage() : Upstream_OneMessage(nullptr) {};
  virtual ~Upstream_OneMessage();

  Upstream_OneMessage(const Upstream_OneMessage& from);
  Upstream_OneMessage(Upstream_OneMessage&& from) noexcept
    : Upstream_OneMessage() {
    *this = ::std::move(from);
  }

  inline Upstream_OneMessage& operator=(const Upstream_OneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upstream_OneMessage& operator=(Upstream_OneMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Upstream_OneMessage& default_instance();

  enum SubMessageCase {
    kDeviceDescription = 2,
    kValuesRobotArm = 3,
    kValuesLightSensor = 4,
    kError = 5,
    SUB_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upstream_OneMessage* internal_default_instance() {
    return reinterpret_cast<const Upstream_OneMessage*>(
               &_Upstream_OneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Upstream_OneMessage& a, Upstream_OneMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Upstream_OneMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upstream_OneMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upstream_OneMessage* New() const final {
    return CreateMaybeMessage<Upstream_OneMessage>(nullptr);
  }

  Upstream_OneMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upstream_OneMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Upstream_OneMessage& from);
  void MergeFrom(const Upstream_OneMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Upstream_OneMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Upstream.OneMessage";
  }
  protected:
  explicit Upstream_OneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetDeviceAddressFieldNumber = 1,
    kDeviceDescriptionFieldNumber = 2,
    kValuesRobotArmFieldNumber = 3,
    kValuesLightSensorFieldNumber = 4,
    kErrorFieldNumber = 5,
  };
  // uint32 target_device_address = 1;
  void clear_target_device_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_device_address() const;
  void set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_device_address() const;
  void _internal_set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .robot_interface.Upstream.DeviceDescription device_description = 2;
  bool has_device_description() const;
  private:
  bool _internal_has_device_description() const;
  public:
  void clear_device_description();
  const ::robot_interface::Upstream_DeviceDescription& device_description() const;
  ::robot_interface::Upstream_DeviceDescription* release_device_description();
  ::robot_interface::Upstream_DeviceDescription* mutable_device_description();
  void set_allocated_device_description(::robot_interface::Upstream_DeviceDescription* device_description);
  private:
  const ::robot_interface::Upstream_DeviceDescription& _internal_device_description() const;
  ::robot_interface::Upstream_DeviceDescription* _internal_mutable_device_description();
  public:
  void unsafe_arena_set_allocated_device_description(
      ::robot_interface::Upstream_DeviceDescription* device_description);
  ::robot_interface::Upstream_DeviceDescription* unsafe_arena_release_device_description();

  // .robot_interface.Upstream.ValuesRobotArm values_robot_arm = 3;
  bool has_values_robot_arm() const;
  private:
  bool _internal_has_values_robot_arm() const;
  public:
  void clear_values_robot_arm();
  const ::robot_interface::Upstream_ValuesRobotArm& values_robot_arm() const;
  ::robot_interface::Upstream_ValuesRobotArm* release_values_robot_arm();
  ::robot_interface::Upstream_ValuesRobotArm* mutable_values_robot_arm();
  void set_allocated_values_robot_arm(::robot_interface::Upstream_ValuesRobotArm* values_robot_arm);
  private:
  const ::robot_interface::Upstream_ValuesRobotArm& _internal_values_robot_arm() const;
  ::robot_interface::Upstream_ValuesRobotArm* _internal_mutable_values_robot_arm();
  public:
  void unsafe_arena_set_allocated_values_robot_arm(
      ::robot_interface::Upstream_ValuesRobotArm* values_robot_arm);
  ::robot_interface::Upstream_ValuesRobotArm* unsafe_arena_release_values_robot_arm();

  // .robot_interface.Upstream.ValuesLightSensor values_light_sensor = 4;
  bool has_values_light_sensor() const;
  private:
  bool _internal_has_values_light_sensor() const;
  public:
  void clear_values_light_sensor();
  const ::robot_interface::Upstream_ValuesLightSensor& values_light_sensor() const;
  ::robot_interface::Upstream_ValuesLightSensor* release_values_light_sensor();
  ::robot_interface::Upstream_ValuesLightSensor* mutable_values_light_sensor();
  void set_allocated_values_light_sensor(::robot_interface::Upstream_ValuesLightSensor* values_light_sensor);
  private:
  const ::robot_interface::Upstream_ValuesLightSensor& _internal_values_light_sensor() const;
  ::robot_interface::Upstream_ValuesLightSensor* _internal_mutable_values_light_sensor();
  public:
  void unsafe_arena_set_allocated_values_light_sensor(
      ::robot_interface::Upstream_ValuesLightSensor* values_light_sensor);
  ::robot_interface::Upstream_ValuesLightSensor* unsafe_arena_release_values_light_sensor();

  // .robot_interface.Upstream.Error error = 5;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::robot_interface::Upstream_Error error() const;
  void set_error(::robot_interface::Upstream_Error value);
  private:
  ::robot_interface::Upstream_Error _internal_error() const;
  void _internal_set_error(::robot_interface::Upstream_Error value);
  public:

  void clear_sub_message();
  SubMessageCase sub_message_case() const;
  // @@protoc_insertion_point(class_scope:robot_interface.Upstream.OneMessage)
 private:
  class _Internal;
  void set_has_device_description();
  void set_has_values_robot_arm();
  void set_has_values_light_sensor();
  void set_has_error();

  inline bool has_sub_message() const;
  inline void clear_has_sub_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_device_address_;
  union SubMessageUnion {
    SubMessageUnion() {}
    ::robot_interface::Upstream_DeviceDescription* device_description_;
    ::robot_interface::Upstream_ValuesRobotArm* values_robot_arm_;
    ::robot_interface::Upstream_ValuesLightSensor* values_light_sensor_;
    int error_;
  } sub_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Upstream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Upstream) */ {
 public:
  inline Upstream() : Upstream(nullptr) {};
  virtual ~Upstream();

  Upstream(const Upstream& from);
  Upstream(Upstream&& from) noexcept
    : Upstream() {
    *this = ::std::move(from);
  }

  inline Upstream& operator=(const Upstream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upstream& operator=(Upstream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Upstream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upstream* internal_default_instance() {
    return reinterpret_cast<const Upstream*>(
               &_Upstream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Upstream& a, Upstream& b) {
    a.Swap(&b);
  }
  inline void Swap(Upstream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upstream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upstream* New() const final {
    return CreateMaybeMessage<Upstream>(nullptr);
  }

  Upstream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upstream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Upstream& from);
  void MergeFrom(const Upstream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Upstream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Upstream";
  }
  protected:
  explicit Upstream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Upstream_DeviceDescription DeviceDescription;
  typedef Upstream_ValuesRobotArm ValuesRobotArm;
  typedef Upstream_ValuesLightSensor ValuesLightSensor;
  typedef Upstream_OneMessage OneMessage;

  typedef Upstream_Error Error;
  static constexpr Error NONE =
    Upstream_Error_NONE;
  static constexpr Error ROBOT_ARM_FAILED_TO_REACH_AXIS =
    Upstream_Error_ROBOT_ARM_FAILED_TO_REACH_AXIS;
  static inline bool Error_IsValid(int value) {
    return Upstream_Error_IsValid(value);
  }
  static constexpr Error Error_MIN =
    Upstream_Error_Error_MIN;
  static constexpr Error Error_MAX =
    Upstream_Error_Error_MAX;
  static constexpr int Error_ARRAYSIZE =
    Upstream_Error_Error_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Error_descriptor() {
    return Upstream_Error_descriptor();
  }
  template<typename T>
  static inline const std::string& Error_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Error>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Error_Name.");
    return Upstream_Error_Name(enum_t_value);
  }
  static inline bool Error_Parse(const std::string& name,
      Error* value) {
    return Upstream_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .robot_interface.Upstream.OneMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::robot_interface::Upstream_OneMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Upstream_OneMessage >*
      mutable_messages();
  private:
  const ::robot_interface::Upstream_OneMessage& _internal_messages(int index) const;
  ::robot_interface::Upstream_OneMessage* _internal_add_messages();
  public:
  const ::robot_interface::Upstream_OneMessage& messages(int index) const;
  ::robot_interface::Upstream_OneMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Upstream_OneMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:robot_interface.Upstream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Upstream_OneMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Downstream_RequestValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Downstream.RequestValues) */ {
 public:
  inline Downstream_RequestValues() : Downstream_RequestValues(nullptr) {};
  virtual ~Downstream_RequestValues();

  Downstream_RequestValues(const Downstream_RequestValues& from);
  Downstream_RequestValues(Downstream_RequestValues&& from) noexcept
    : Downstream_RequestValues() {
    *this = ::std::move(from);
  }

  inline Downstream_RequestValues& operator=(const Downstream_RequestValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline Downstream_RequestValues& operator=(Downstream_RequestValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Downstream_RequestValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Downstream_RequestValues* internal_default_instance() {
    return reinterpret_cast<const Downstream_RequestValues*>(
               &_Downstream_RequestValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Downstream_RequestValues& a, Downstream_RequestValues& b) {
    a.Swap(&b);
  }
  inline void Swap(Downstream_RequestValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Downstream_RequestValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Downstream_RequestValues* New() const final {
    return CreateMaybeMessage<Downstream_RequestValues>(nullptr);
  }

  Downstream_RequestValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Downstream_RequestValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Downstream_RequestValues& from);
  void MergeFrom(const Downstream_RequestValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Downstream_RequestValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Downstream.RequestValues";
  }
  protected:
  explicit Downstream_RequestValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestValuesFieldNumber = 1,
  };
  // bool request_values = 1;
  void clear_request_values();
  bool request_values() const;
  void set_request_values(bool value);
  private:
  bool _internal_request_values() const;
  void _internal_set_request_values(bool value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Downstream.RequestValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool request_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Downstream_SetAxisRobotArm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Downstream.SetAxisRobotArm) */ {
 public:
  inline Downstream_SetAxisRobotArm() : Downstream_SetAxisRobotArm(nullptr) {};
  virtual ~Downstream_SetAxisRobotArm();

  Downstream_SetAxisRobotArm(const Downstream_SetAxisRobotArm& from);
  Downstream_SetAxisRobotArm(Downstream_SetAxisRobotArm&& from) noexcept
    : Downstream_SetAxisRobotArm() {
    *this = ::std::move(from);
  }

  inline Downstream_SetAxisRobotArm& operator=(const Downstream_SetAxisRobotArm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Downstream_SetAxisRobotArm& operator=(Downstream_SetAxisRobotArm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Downstream_SetAxisRobotArm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Downstream_SetAxisRobotArm* internal_default_instance() {
    return reinterpret_cast<const Downstream_SetAxisRobotArm*>(
               &_Downstream_SetAxisRobotArm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Downstream_SetAxisRobotArm& a, Downstream_SetAxisRobotArm& b) {
    a.Swap(&b);
  }
  inline void Swap(Downstream_SetAxisRobotArm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Downstream_SetAxisRobotArm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Downstream_SetAxisRobotArm* New() const final {
    return CreateMaybeMessage<Downstream_SetAxisRobotArm>(nullptr);
  }

  Downstream_SetAxisRobotArm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Downstream_SetAxisRobotArm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Downstream_SetAxisRobotArm& from);
  void MergeFrom(const Downstream_SetAxisRobotArm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Downstream_SetAxisRobotArm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Downstream.SetAxisRobotArm";
  }
  protected:
  explicit Downstream_SetAxisRobotArm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAxisFieldNumber = 1,
  };
  // .robot_interface.Axis target_axis = 1;
  bool has_target_axis() const;
  private:
  bool _internal_has_target_axis() const;
  public:
  void clear_target_axis();
  const ::robot_interface::Axis& target_axis() const;
  ::robot_interface::Axis* release_target_axis();
  ::robot_interface::Axis* mutable_target_axis();
  void set_allocated_target_axis(::robot_interface::Axis* target_axis);
  private:
  const ::robot_interface::Axis& _internal_target_axis() const;
  ::robot_interface::Axis* _internal_mutable_target_axis();
  public:
  void unsafe_arena_set_allocated_target_axis(
      ::robot_interface::Axis* target_axis);
  ::robot_interface::Axis* unsafe_arena_release_target_axis();

  // @@protoc_insertion_point(class_scope:robot_interface.Downstream.SetAxisRobotArm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_interface::Axis* target_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Downstream_ClearQueueRobotArm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Downstream.ClearQueueRobotArm) */ {
 public:
  inline Downstream_ClearQueueRobotArm() : Downstream_ClearQueueRobotArm(nullptr) {};
  virtual ~Downstream_ClearQueueRobotArm();

  Downstream_ClearQueueRobotArm(const Downstream_ClearQueueRobotArm& from);
  Downstream_ClearQueueRobotArm(Downstream_ClearQueueRobotArm&& from) noexcept
    : Downstream_ClearQueueRobotArm() {
    *this = ::std::move(from);
  }

  inline Downstream_ClearQueueRobotArm& operator=(const Downstream_ClearQueueRobotArm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Downstream_ClearQueueRobotArm& operator=(Downstream_ClearQueueRobotArm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Downstream_ClearQueueRobotArm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Downstream_ClearQueueRobotArm* internal_default_instance() {
    return reinterpret_cast<const Downstream_ClearQueueRobotArm*>(
               &_Downstream_ClearQueueRobotArm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Downstream_ClearQueueRobotArm& a, Downstream_ClearQueueRobotArm& b) {
    a.Swap(&b);
  }
  inline void Swap(Downstream_ClearQueueRobotArm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Downstream_ClearQueueRobotArm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Downstream_ClearQueueRobotArm* New() const final {
    return CreateMaybeMessage<Downstream_ClearQueueRobotArm>(nullptr);
  }

  Downstream_ClearQueueRobotArm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Downstream_ClearQueueRobotArm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Downstream_ClearQueueRobotArm& from);
  void MergeFrom(const Downstream_ClearQueueRobotArm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Downstream_ClearQueueRobotArm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Downstream.ClearQueueRobotArm";
  }
  protected:
  explicit Downstream_ClearQueueRobotArm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearQueueFieldNumber = 1,
  };
  // bool clear_queue = 1;
  void clear_clear_queue();
  bool clear_queue() const;
  void set_clear_queue(bool value);
  private:
  bool _internal_clear_queue() const;
  void _internal_set_clear_queue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:robot_interface.Downstream.ClearQueueRobotArm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool clear_queue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Downstream_OneMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Downstream.OneMessage) */ {
 public:
  inline Downstream_OneMessage() : Downstream_OneMessage(nullptr) {};
  virtual ~Downstream_OneMessage();

  Downstream_OneMessage(const Downstream_OneMessage& from);
  Downstream_OneMessage(Downstream_OneMessage&& from) noexcept
    : Downstream_OneMessage() {
    *this = ::std::move(from);
  }

  inline Downstream_OneMessage& operator=(const Downstream_OneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Downstream_OneMessage& operator=(Downstream_OneMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Downstream_OneMessage& default_instance();

  enum SubMessageCase {
    kRequestValues = 2,
    kSetAxisRobotArm = 3,
    kClearQueueRobotArm = 4,
    SUB_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Downstream_OneMessage* internal_default_instance() {
    return reinterpret_cast<const Downstream_OneMessage*>(
               &_Downstream_OneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Downstream_OneMessage& a, Downstream_OneMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Downstream_OneMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Downstream_OneMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Downstream_OneMessage* New() const final {
    return CreateMaybeMessage<Downstream_OneMessage>(nullptr);
  }

  Downstream_OneMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Downstream_OneMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Downstream_OneMessage& from);
  void MergeFrom(const Downstream_OneMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Downstream_OneMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Downstream.OneMessage";
  }
  protected:
  explicit Downstream_OneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetDeviceAddressFieldNumber = 1,
    kRequestValuesFieldNumber = 2,
    kSetAxisRobotArmFieldNumber = 3,
    kClearQueueRobotArmFieldNumber = 4,
  };
  // uint32 target_device_address = 1;
  void clear_target_device_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_device_address() const;
  void set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_device_address() const;
  void _internal_set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .robot_interface.Downstream.RequestValues request_values = 2;
  bool has_request_values() const;
  private:
  bool _internal_has_request_values() const;
  public:
  void clear_request_values();
  const ::robot_interface::Downstream_RequestValues& request_values() const;
  ::robot_interface::Downstream_RequestValues* release_request_values();
  ::robot_interface::Downstream_RequestValues* mutable_request_values();
  void set_allocated_request_values(::robot_interface::Downstream_RequestValues* request_values);
  private:
  const ::robot_interface::Downstream_RequestValues& _internal_request_values() const;
  ::robot_interface::Downstream_RequestValues* _internal_mutable_request_values();
  public:
  void unsafe_arena_set_allocated_request_values(
      ::robot_interface::Downstream_RequestValues* request_values);
  ::robot_interface::Downstream_RequestValues* unsafe_arena_release_request_values();

  // .robot_interface.Downstream.SetAxisRobotArm set_axis_robot_arm = 3;
  bool has_set_axis_robot_arm() const;
  private:
  bool _internal_has_set_axis_robot_arm() const;
  public:
  void clear_set_axis_robot_arm();
  const ::robot_interface::Downstream_SetAxisRobotArm& set_axis_robot_arm() const;
  ::robot_interface::Downstream_SetAxisRobotArm* release_set_axis_robot_arm();
  ::robot_interface::Downstream_SetAxisRobotArm* mutable_set_axis_robot_arm();
  void set_allocated_set_axis_robot_arm(::robot_interface::Downstream_SetAxisRobotArm* set_axis_robot_arm);
  private:
  const ::robot_interface::Downstream_SetAxisRobotArm& _internal_set_axis_robot_arm() const;
  ::robot_interface::Downstream_SetAxisRobotArm* _internal_mutable_set_axis_robot_arm();
  public:
  void unsafe_arena_set_allocated_set_axis_robot_arm(
      ::robot_interface::Downstream_SetAxisRobotArm* set_axis_robot_arm);
  ::robot_interface::Downstream_SetAxisRobotArm* unsafe_arena_release_set_axis_robot_arm();

  // .robot_interface.Downstream.ClearQueueRobotArm clear_queue_robot_arm = 4;
  bool has_clear_queue_robot_arm() const;
  private:
  bool _internal_has_clear_queue_robot_arm() const;
  public:
  void clear_clear_queue_robot_arm();
  const ::robot_interface::Downstream_ClearQueueRobotArm& clear_queue_robot_arm() const;
  ::robot_interface::Downstream_ClearQueueRobotArm* release_clear_queue_robot_arm();
  ::robot_interface::Downstream_ClearQueueRobotArm* mutable_clear_queue_robot_arm();
  void set_allocated_clear_queue_robot_arm(::robot_interface::Downstream_ClearQueueRobotArm* clear_queue_robot_arm);
  private:
  const ::robot_interface::Downstream_ClearQueueRobotArm& _internal_clear_queue_robot_arm() const;
  ::robot_interface::Downstream_ClearQueueRobotArm* _internal_mutable_clear_queue_robot_arm();
  public:
  void unsafe_arena_set_allocated_clear_queue_robot_arm(
      ::robot_interface::Downstream_ClearQueueRobotArm* clear_queue_robot_arm);
  ::robot_interface::Downstream_ClearQueueRobotArm* unsafe_arena_release_clear_queue_robot_arm();

  void clear_sub_message();
  SubMessageCase sub_message_case() const;
  // @@protoc_insertion_point(class_scope:robot_interface.Downstream.OneMessage)
 private:
  class _Internal;
  void set_has_request_values();
  void set_has_set_axis_robot_arm();
  void set_has_clear_queue_robot_arm();

  inline bool has_sub_message() const;
  inline void clear_has_sub_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_device_address_;
  union SubMessageUnion {
    SubMessageUnion() {}
    ::robot_interface::Downstream_RequestValues* request_values_;
    ::robot_interface::Downstream_SetAxisRobotArm* set_axis_robot_arm_;
    ::robot_interface::Downstream_ClearQueueRobotArm* clear_queue_robot_arm_;
  } sub_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RobotInterface_2eproto;
};
// -------------------------------------------------------------------

class Downstream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_interface.Downstream) */ {
 public:
  inline Downstream() : Downstream(nullptr) {};
  virtual ~Downstream();

  Downstream(const Downstream& from);
  Downstream(Downstream&& from) noexcept
    : Downstream() {
    *this = ::std::move(from);
  }

  inline Downstream& operator=(const Downstream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Downstream& operator=(Downstream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Downstream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Downstream* internal_default_instance() {
    return reinterpret_cast<const Downstream*>(
               &_Downstream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Downstream& a, Downstream& b) {
    a.Swap(&b);
  }
  inline void Swap(Downstream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Downstream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Downstream* New() const final {
    return CreateMaybeMessage<Downstream>(nullptr);
  }

  Downstream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Downstream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Downstream& from);
  void MergeFrom(const Downstream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Downstream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_interface.Downstream";
  }
  protected:
  explicit Downstream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RobotInterface_2eproto);
    return ::descriptor_table_RobotInterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Downstream_RequestValues RequestValues;
  typedef Downstream_SetAxisRobotArm SetAxisRobotArm;
  typedef Downstream_ClearQueueRobotArm ClearQueueRobotArm;
  typedef Downstream_OneMessage OneMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .robot_interface.Downstream.OneMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::robot_interface::Downstream_OneMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Downstream_OneMessage >*
      mutable_messages();
  private:
  const ::robot_interface::Downstream_OneMessage& _internal_messages(int index) const;
  ::robot_interface::Downstream_OneMessage* _internal_add_messages();
  public:
  const ::robot_interface::Downstream_OneMessage& messages(int index) const;
  ::robot_interface::Downstream_OneMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Downstream_OneMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:robot_interface.Downstream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Downstream_OneMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotInterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Axis

// double axis_1 = 1;
inline void Axis::clear_axis_1() {
  axis_1_ = 0;
}
inline double Axis::_internal_axis_1() const {
  return axis_1_;
}
inline double Axis::axis_1() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_1)
  return _internal_axis_1();
}
inline void Axis::_internal_set_axis_1(double value) {
  
  axis_1_ = value;
}
inline void Axis::set_axis_1(double value) {
  _internal_set_axis_1(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_1)
}

// double axis_2 = 2;
inline void Axis::clear_axis_2() {
  axis_2_ = 0;
}
inline double Axis::_internal_axis_2() const {
  return axis_2_;
}
inline double Axis::axis_2() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_2)
  return _internal_axis_2();
}
inline void Axis::_internal_set_axis_2(double value) {
  
  axis_2_ = value;
}
inline void Axis::set_axis_2(double value) {
  _internal_set_axis_2(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_2)
}

// double axis_3 = 3;
inline void Axis::clear_axis_3() {
  axis_3_ = 0;
}
inline double Axis::_internal_axis_3() const {
  return axis_3_;
}
inline double Axis::axis_3() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_3)
  return _internal_axis_3();
}
inline void Axis::_internal_set_axis_3(double value) {
  
  axis_3_ = value;
}
inline void Axis::set_axis_3(double value) {
  _internal_set_axis_3(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_3)
}

// double axis_4 = 4;
inline void Axis::clear_axis_4() {
  axis_4_ = 0;
}
inline double Axis::_internal_axis_4() const {
  return axis_4_;
}
inline double Axis::axis_4() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_4)
  return _internal_axis_4();
}
inline void Axis::_internal_set_axis_4(double value) {
  
  axis_4_ = value;
}
inline void Axis::set_axis_4(double value) {
  _internal_set_axis_4(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_4)
}

// double axis_5 = 5;
inline void Axis::clear_axis_5() {
  axis_5_ = 0;
}
inline double Axis::_internal_axis_5() const {
  return axis_5_;
}
inline double Axis::axis_5() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_5)
  return _internal_axis_5();
}
inline void Axis::_internal_set_axis_5(double value) {
  
  axis_5_ = value;
}
inline void Axis::set_axis_5(double value) {
  _internal_set_axis_5(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_5)
}

// double axis_6 = 6;
inline void Axis::clear_axis_6() {
  axis_6_ = 0;
}
inline double Axis::_internal_axis_6() const {
  return axis_6_;
}
inline double Axis::axis_6() const {
  // @@protoc_insertion_point(field_get:robot_interface.Axis.axis_6)
  return _internal_axis_6();
}
inline void Axis::_internal_set_axis_6(double value) {
  
  axis_6_ = value;
}
inline void Axis::set_axis_6(double value) {
  _internal_set_axis_6(value);
  // @@protoc_insertion_point(field_set:robot_interface.Axis.axis_6)
}

// -------------------------------------------------------------------

// Upstream_DeviceDescription

// string name = 1;
inline void Upstream_DeviceDescription::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Upstream_DeviceDescription::name() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.DeviceDescription.name)
  return _internal_name();
}
inline void Upstream_DeviceDescription::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.DeviceDescription.name)
}
inline std::string* Upstream_DeviceDescription::mutable_name() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.DeviceDescription.name)
  return _internal_mutable_name();
}
inline const std::string& Upstream_DeviceDescription::_internal_name() const {
  return name_.Get();
}
inline void Upstream_DeviceDescription::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Upstream_DeviceDescription::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:robot_interface.Upstream.DeviceDescription.name)
}
inline void Upstream_DeviceDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:robot_interface.Upstream.DeviceDescription.name)
}
inline void Upstream_DeviceDescription::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:robot_interface.Upstream.DeviceDescription.name)
}
inline std::string* Upstream_DeviceDescription::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Upstream_DeviceDescription::release_name() {
  // @@protoc_insertion_point(field_release:robot_interface.Upstream.DeviceDescription.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Upstream_DeviceDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:robot_interface.Upstream.DeviceDescription.name)
}
inline std::string* Upstream_DeviceDescription::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Upstream.DeviceDescription.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Upstream_DeviceDescription::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Upstream.DeviceDescription.name)
}

// .robot_interface.DeviceType type = 2;
inline void Upstream_DeviceDescription::clear_type() {
  type_ = 0;
}
inline ::robot_interface::DeviceType Upstream_DeviceDescription::_internal_type() const {
  return static_cast< ::robot_interface::DeviceType >(type_);
}
inline ::robot_interface::DeviceType Upstream_DeviceDescription::type() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.DeviceDescription.type)
  return _internal_type();
}
inline void Upstream_DeviceDescription::_internal_set_type(::robot_interface::DeviceType value) {
  
  type_ = value;
}
inline void Upstream_DeviceDescription::set_type(::robot_interface::DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.DeviceDescription.type)
}

// -------------------------------------------------------------------

// Upstream_ValuesRobotArm

// .robot_interface.Axis axis = 1;
inline bool Upstream_ValuesRobotArm::_internal_has_axis() const {
  return this != internal_default_instance() && axis_ != nullptr;
}
inline bool Upstream_ValuesRobotArm::has_axis() const {
  return _internal_has_axis();
}
inline void Upstream_ValuesRobotArm::clear_axis() {
  if (GetArena() == nullptr && axis_ != nullptr) {
    delete axis_;
  }
  axis_ = nullptr;
}
inline const ::robot_interface::Axis& Upstream_ValuesRobotArm::_internal_axis() const {
  const ::robot_interface::Axis* p = axis_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robot_interface::Axis*>(
      &::robot_interface::_Axis_default_instance_);
}
inline const ::robot_interface::Axis& Upstream_ValuesRobotArm::axis() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.ValuesRobotArm.axis)
  return _internal_axis();
}
inline void Upstream_ValuesRobotArm::unsafe_arena_set_allocated_axis(
    ::robot_interface::Axis* axis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_);
  }
  axis_ = axis;
  if (axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Upstream.ValuesRobotArm.axis)
}
inline ::robot_interface::Axis* Upstream_ValuesRobotArm::release_axis() {
  auto temp = unsafe_arena_release_axis();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robot_interface::Axis* Upstream_ValuesRobotArm::unsafe_arena_release_axis() {
  // @@protoc_insertion_point(field_release:robot_interface.Upstream.ValuesRobotArm.axis)
  
  ::robot_interface::Axis* temp = axis_;
  axis_ = nullptr;
  return temp;
}
inline ::robot_interface::Axis* Upstream_ValuesRobotArm::_internal_mutable_axis() {
  
  if (axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_interface::Axis>(GetArena());
    axis_ = p;
  }
  return axis_;
}
inline ::robot_interface::Axis* Upstream_ValuesRobotArm::mutable_axis() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.ValuesRobotArm.axis)
  return _internal_mutable_axis();
}
inline void Upstream_ValuesRobotArm::set_allocated_axis(::robot_interface::Axis* axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete axis_;
  }
  if (axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(axis);
    if (message_arena != submessage_arena) {
      axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis, submessage_arena);
    }
    
  } else {
    
  }
  axis_ = axis;
  // @@protoc_insertion_point(field_set_allocated:robot_interface.Upstream.ValuesRobotArm.axis)
}

// int32 axis_queue_size = 2;
inline void Upstream_ValuesRobotArm::clear_axis_queue_size() {
  axis_queue_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Upstream_ValuesRobotArm::_internal_axis_queue_size() const {
  return axis_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Upstream_ValuesRobotArm::axis_queue_size() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.ValuesRobotArm.axis_queue_size)
  return _internal_axis_queue_size();
}
inline void Upstream_ValuesRobotArm::_internal_set_axis_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_queue_size_ = value;
}
inline void Upstream_ValuesRobotArm::set_axis_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_queue_size(value);
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.ValuesRobotArm.axis_queue_size)
}

// -------------------------------------------------------------------

// Upstream_ValuesLightSensor

// double light = 1;
inline void Upstream_ValuesLightSensor::clear_light() {
  light_ = 0;
}
inline double Upstream_ValuesLightSensor::_internal_light() const {
  return light_;
}
inline double Upstream_ValuesLightSensor::light() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.ValuesLightSensor.light)
  return _internal_light();
}
inline void Upstream_ValuesLightSensor::_internal_set_light(double value) {
  
  light_ = value;
}
inline void Upstream_ValuesLightSensor::set_light(double value) {
  _internal_set_light(value);
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.ValuesLightSensor.light)
}

// -------------------------------------------------------------------

// Upstream_OneMessage

// uint32 target_device_address = 1;
inline void Upstream_OneMessage::clear_target_device_address() {
  target_device_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Upstream_OneMessage::_internal_target_device_address() const {
  return target_device_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Upstream_OneMessage::target_device_address() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.OneMessage.target_device_address)
  return _internal_target_device_address();
}
inline void Upstream_OneMessage::_internal_set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_device_address_ = value;
}
inline void Upstream_OneMessage::set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_device_address(value);
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.OneMessage.target_device_address)
}

// .robot_interface.Upstream.DeviceDescription device_description = 2;
inline bool Upstream_OneMessage::_internal_has_device_description() const {
  return sub_message_case() == kDeviceDescription;
}
inline bool Upstream_OneMessage::has_device_description() const {
  return _internal_has_device_description();
}
inline void Upstream_OneMessage::set_has_device_description() {
  _oneof_case_[0] = kDeviceDescription;
}
inline void Upstream_OneMessage::clear_device_description() {
  if (_internal_has_device_description()) {
    if (GetArena() == nullptr) {
      delete sub_message_.device_description_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Upstream_DeviceDescription* Upstream_OneMessage::release_device_description() {
  // @@protoc_insertion_point(field_release:robot_interface.Upstream.OneMessage.device_description)
  if (_internal_has_device_description()) {
    clear_has_sub_message();
      ::robot_interface::Upstream_DeviceDescription* temp = sub_message_.device_description_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.device_description_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Upstream_DeviceDescription& Upstream_OneMessage::_internal_device_description() const {
  return _internal_has_device_description()
      ? *sub_message_.device_description_
      : *reinterpret_cast< ::robot_interface::Upstream_DeviceDescription*>(&::robot_interface::_Upstream_DeviceDescription_default_instance_);
}
inline const ::robot_interface::Upstream_DeviceDescription& Upstream_OneMessage::device_description() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.OneMessage.device_description)
  return _internal_device_description();
}
inline ::robot_interface::Upstream_DeviceDescription* Upstream_OneMessage::unsafe_arena_release_device_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Upstream.OneMessage.device_description)
  if (_internal_has_device_description()) {
    clear_has_sub_message();
    ::robot_interface::Upstream_DeviceDescription* temp = sub_message_.device_description_;
    sub_message_.device_description_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Upstream_OneMessage::unsafe_arena_set_allocated_device_description(::robot_interface::Upstream_DeviceDescription* device_description) {
  clear_sub_message();
  if (device_description) {
    set_has_device_description();
    sub_message_.device_description_ = device_description;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Upstream.OneMessage.device_description)
}
inline ::robot_interface::Upstream_DeviceDescription* Upstream_OneMessage::_internal_mutable_device_description() {
  if (!_internal_has_device_description()) {
    clear_sub_message();
    set_has_device_description();
    sub_message_.device_description_ = CreateMaybeMessage< ::robot_interface::Upstream_DeviceDescription >(GetArena());
  }
  return sub_message_.device_description_;
}
inline ::robot_interface::Upstream_DeviceDescription* Upstream_OneMessage::mutable_device_description() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.OneMessage.device_description)
  return _internal_mutable_device_description();
}

// .robot_interface.Upstream.ValuesRobotArm values_robot_arm = 3;
inline bool Upstream_OneMessage::_internal_has_values_robot_arm() const {
  return sub_message_case() == kValuesRobotArm;
}
inline bool Upstream_OneMessage::has_values_robot_arm() const {
  return _internal_has_values_robot_arm();
}
inline void Upstream_OneMessage::set_has_values_robot_arm() {
  _oneof_case_[0] = kValuesRobotArm;
}
inline void Upstream_OneMessage::clear_values_robot_arm() {
  if (_internal_has_values_robot_arm()) {
    if (GetArena() == nullptr) {
      delete sub_message_.values_robot_arm_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Upstream_ValuesRobotArm* Upstream_OneMessage::release_values_robot_arm() {
  // @@protoc_insertion_point(field_release:robot_interface.Upstream.OneMessage.values_robot_arm)
  if (_internal_has_values_robot_arm()) {
    clear_has_sub_message();
      ::robot_interface::Upstream_ValuesRobotArm* temp = sub_message_.values_robot_arm_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.values_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Upstream_ValuesRobotArm& Upstream_OneMessage::_internal_values_robot_arm() const {
  return _internal_has_values_robot_arm()
      ? *sub_message_.values_robot_arm_
      : *reinterpret_cast< ::robot_interface::Upstream_ValuesRobotArm*>(&::robot_interface::_Upstream_ValuesRobotArm_default_instance_);
}
inline const ::robot_interface::Upstream_ValuesRobotArm& Upstream_OneMessage::values_robot_arm() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.OneMessage.values_robot_arm)
  return _internal_values_robot_arm();
}
inline ::robot_interface::Upstream_ValuesRobotArm* Upstream_OneMessage::unsafe_arena_release_values_robot_arm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Upstream.OneMessage.values_robot_arm)
  if (_internal_has_values_robot_arm()) {
    clear_has_sub_message();
    ::robot_interface::Upstream_ValuesRobotArm* temp = sub_message_.values_robot_arm_;
    sub_message_.values_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Upstream_OneMessage::unsafe_arena_set_allocated_values_robot_arm(::robot_interface::Upstream_ValuesRobotArm* values_robot_arm) {
  clear_sub_message();
  if (values_robot_arm) {
    set_has_values_robot_arm();
    sub_message_.values_robot_arm_ = values_robot_arm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Upstream.OneMessage.values_robot_arm)
}
inline ::robot_interface::Upstream_ValuesRobotArm* Upstream_OneMessage::_internal_mutable_values_robot_arm() {
  if (!_internal_has_values_robot_arm()) {
    clear_sub_message();
    set_has_values_robot_arm();
    sub_message_.values_robot_arm_ = CreateMaybeMessage< ::robot_interface::Upstream_ValuesRobotArm >(GetArena());
  }
  return sub_message_.values_robot_arm_;
}
inline ::robot_interface::Upstream_ValuesRobotArm* Upstream_OneMessage::mutable_values_robot_arm() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.OneMessage.values_robot_arm)
  return _internal_mutable_values_robot_arm();
}

// .robot_interface.Upstream.ValuesLightSensor values_light_sensor = 4;
inline bool Upstream_OneMessage::_internal_has_values_light_sensor() const {
  return sub_message_case() == kValuesLightSensor;
}
inline bool Upstream_OneMessage::has_values_light_sensor() const {
  return _internal_has_values_light_sensor();
}
inline void Upstream_OneMessage::set_has_values_light_sensor() {
  _oneof_case_[0] = kValuesLightSensor;
}
inline void Upstream_OneMessage::clear_values_light_sensor() {
  if (_internal_has_values_light_sensor()) {
    if (GetArena() == nullptr) {
      delete sub_message_.values_light_sensor_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Upstream_ValuesLightSensor* Upstream_OneMessage::release_values_light_sensor() {
  // @@protoc_insertion_point(field_release:robot_interface.Upstream.OneMessage.values_light_sensor)
  if (_internal_has_values_light_sensor()) {
    clear_has_sub_message();
      ::robot_interface::Upstream_ValuesLightSensor* temp = sub_message_.values_light_sensor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.values_light_sensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Upstream_ValuesLightSensor& Upstream_OneMessage::_internal_values_light_sensor() const {
  return _internal_has_values_light_sensor()
      ? *sub_message_.values_light_sensor_
      : *reinterpret_cast< ::robot_interface::Upstream_ValuesLightSensor*>(&::robot_interface::_Upstream_ValuesLightSensor_default_instance_);
}
inline const ::robot_interface::Upstream_ValuesLightSensor& Upstream_OneMessage::values_light_sensor() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.OneMessage.values_light_sensor)
  return _internal_values_light_sensor();
}
inline ::robot_interface::Upstream_ValuesLightSensor* Upstream_OneMessage::unsafe_arena_release_values_light_sensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Upstream.OneMessage.values_light_sensor)
  if (_internal_has_values_light_sensor()) {
    clear_has_sub_message();
    ::robot_interface::Upstream_ValuesLightSensor* temp = sub_message_.values_light_sensor_;
    sub_message_.values_light_sensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Upstream_OneMessage::unsafe_arena_set_allocated_values_light_sensor(::robot_interface::Upstream_ValuesLightSensor* values_light_sensor) {
  clear_sub_message();
  if (values_light_sensor) {
    set_has_values_light_sensor();
    sub_message_.values_light_sensor_ = values_light_sensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Upstream.OneMessage.values_light_sensor)
}
inline ::robot_interface::Upstream_ValuesLightSensor* Upstream_OneMessage::_internal_mutable_values_light_sensor() {
  if (!_internal_has_values_light_sensor()) {
    clear_sub_message();
    set_has_values_light_sensor();
    sub_message_.values_light_sensor_ = CreateMaybeMessage< ::robot_interface::Upstream_ValuesLightSensor >(GetArena());
  }
  return sub_message_.values_light_sensor_;
}
inline ::robot_interface::Upstream_ValuesLightSensor* Upstream_OneMessage::mutable_values_light_sensor() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.OneMessage.values_light_sensor)
  return _internal_mutable_values_light_sensor();
}

// .robot_interface.Upstream.Error error = 5;
inline bool Upstream_OneMessage::_internal_has_error() const {
  return sub_message_case() == kError;
}
inline void Upstream_OneMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Upstream_OneMessage::clear_error() {
  if (_internal_has_error()) {
    sub_message_.error_ = 0;
    clear_has_sub_message();
  }
}
inline ::robot_interface::Upstream_Error Upstream_OneMessage::_internal_error() const {
  if (_internal_has_error()) {
    return static_cast< ::robot_interface::Upstream_Error >(sub_message_.error_);
  }
  return static_cast< ::robot_interface::Upstream_Error >(0);
}
inline ::robot_interface::Upstream_Error Upstream_OneMessage::error() const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.OneMessage.error)
  return _internal_error();
}
inline void Upstream_OneMessage::_internal_set_error(::robot_interface::Upstream_Error value) {
  if (!_internal_has_error()) {
    clear_sub_message();
    set_has_error();
  }
  sub_message_.error_ = value;
}
inline void Upstream_OneMessage::set_error(::robot_interface::Upstream_Error value) {
  // @@protoc_insertion_point(field_set:robot_interface.Upstream.OneMessage.error)
  _internal_set_error(value);
}

inline bool Upstream_OneMessage::has_sub_message() const {
  return sub_message_case() != SUB_MESSAGE_NOT_SET;
}
inline void Upstream_OneMessage::clear_has_sub_message() {
  _oneof_case_[0] = SUB_MESSAGE_NOT_SET;
}
inline Upstream_OneMessage::SubMessageCase Upstream_OneMessage::sub_message_case() const {
  return Upstream_OneMessage::SubMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Upstream

// repeated .robot_interface.Upstream.OneMessage messages = 1;
inline int Upstream::_internal_messages_size() const {
  return messages_.size();
}
inline int Upstream::messages_size() const {
  return _internal_messages_size();
}
inline void Upstream::clear_messages() {
  messages_.Clear();
}
inline ::robot_interface::Upstream_OneMessage* Upstream::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:robot_interface.Upstream.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Upstream_OneMessage >*
Upstream::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:robot_interface.Upstream.messages)
  return &messages_;
}
inline const ::robot_interface::Upstream_OneMessage& Upstream::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::robot_interface::Upstream_OneMessage& Upstream::messages(int index) const {
  // @@protoc_insertion_point(field_get:robot_interface.Upstream.messages)
  return _internal_messages(index);
}
inline ::robot_interface::Upstream_OneMessage* Upstream::_internal_add_messages() {
  return messages_.Add();
}
inline ::robot_interface::Upstream_OneMessage* Upstream::add_messages() {
  // @@protoc_insertion_point(field_add:robot_interface.Upstream.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Upstream_OneMessage >&
Upstream::messages() const {
  // @@protoc_insertion_point(field_list:robot_interface.Upstream.messages)
  return messages_;
}

// -------------------------------------------------------------------

// Downstream_RequestValues

// bool request_values = 1;
inline void Downstream_RequestValues::clear_request_values() {
  request_values_ = false;
}
inline bool Downstream_RequestValues::_internal_request_values() const {
  return request_values_;
}
inline bool Downstream_RequestValues::request_values() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.RequestValues.request_values)
  return _internal_request_values();
}
inline void Downstream_RequestValues::_internal_set_request_values(bool value) {
  
  request_values_ = value;
}
inline void Downstream_RequestValues::set_request_values(bool value) {
  _internal_set_request_values(value);
  // @@protoc_insertion_point(field_set:robot_interface.Downstream.RequestValues.request_values)
}

// -------------------------------------------------------------------

// Downstream_SetAxisRobotArm

// .robot_interface.Axis target_axis = 1;
inline bool Downstream_SetAxisRobotArm::_internal_has_target_axis() const {
  return this != internal_default_instance() && target_axis_ != nullptr;
}
inline bool Downstream_SetAxisRobotArm::has_target_axis() const {
  return _internal_has_target_axis();
}
inline void Downstream_SetAxisRobotArm::clear_target_axis() {
  if (GetArena() == nullptr && target_axis_ != nullptr) {
    delete target_axis_;
  }
  target_axis_ = nullptr;
}
inline const ::robot_interface::Axis& Downstream_SetAxisRobotArm::_internal_target_axis() const {
  const ::robot_interface::Axis* p = target_axis_;
  return p != nullptr ? *p : *reinterpret_cast<const ::robot_interface::Axis*>(
      &::robot_interface::_Axis_default_instance_);
}
inline const ::robot_interface::Axis& Downstream_SetAxisRobotArm::target_axis() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.SetAxisRobotArm.target_axis)
  return _internal_target_axis();
}
inline void Downstream_SetAxisRobotArm::unsafe_arena_set_allocated_target_axis(
    ::robot_interface::Axis* target_axis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_axis_);
  }
  target_axis_ = target_axis;
  if (target_axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Downstream.SetAxisRobotArm.target_axis)
}
inline ::robot_interface::Axis* Downstream_SetAxisRobotArm::release_target_axis() {
  auto temp = unsafe_arena_release_target_axis();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::robot_interface::Axis* Downstream_SetAxisRobotArm::unsafe_arena_release_target_axis() {
  // @@protoc_insertion_point(field_release:robot_interface.Downstream.SetAxisRobotArm.target_axis)
  
  ::robot_interface::Axis* temp = target_axis_;
  target_axis_ = nullptr;
  return temp;
}
inline ::robot_interface::Axis* Downstream_SetAxisRobotArm::_internal_mutable_target_axis() {
  
  if (target_axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_interface::Axis>(GetArena());
    target_axis_ = p;
  }
  return target_axis_;
}
inline ::robot_interface::Axis* Downstream_SetAxisRobotArm::mutable_target_axis() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Downstream.SetAxisRobotArm.target_axis)
  return _internal_mutable_target_axis();
}
inline void Downstream_SetAxisRobotArm::set_allocated_target_axis(::robot_interface::Axis* target_axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_axis_;
  }
  if (target_axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_axis);
    if (message_arena != submessage_arena) {
      target_axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_axis, submessage_arena);
    }
    
  } else {
    
  }
  target_axis_ = target_axis;
  // @@protoc_insertion_point(field_set_allocated:robot_interface.Downstream.SetAxisRobotArm.target_axis)
}

// -------------------------------------------------------------------

// Downstream_ClearQueueRobotArm

// bool clear_queue = 1;
inline void Downstream_ClearQueueRobotArm::clear_clear_queue() {
  clear_queue_ = false;
}
inline bool Downstream_ClearQueueRobotArm::_internal_clear_queue() const {
  return clear_queue_;
}
inline bool Downstream_ClearQueueRobotArm::clear_queue() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.ClearQueueRobotArm.clear_queue)
  return _internal_clear_queue();
}
inline void Downstream_ClearQueueRobotArm::_internal_set_clear_queue(bool value) {
  
  clear_queue_ = value;
}
inline void Downstream_ClearQueueRobotArm::set_clear_queue(bool value) {
  _internal_set_clear_queue(value);
  // @@protoc_insertion_point(field_set:robot_interface.Downstream.ClearQueueRobotArm.clear_queue)
}

// -------------------------------------------------------------------

// Downstream_OneMessage

// uint32 target_device_address = 1;
inline void Downstream_OneMessage::clear_target_device_address() {
  target_device_address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Downstream_OneMessage::_internal_target_device_address() const {
  return target_device_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Downstream_OneMessage::target_device_address() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.OneMessage.target_device_address)
  return _internal_target_device_address();
}
inline void Downstream_OneMessage::_internal_set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_device_address_ = value;
}
inline void Downstream_OneMessage::set_target_device_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_device_address(value);
  // @@protoc_insertion_point(field_set:robot_interface.Downstream.OneMessage.target_device_address)
}

// .robot_interface.Downstream.RequestValues request_values = 2;
inline bool Downstream_OneMessage::_internal_has_request_values() const {
  return sub_message_case() == kRequestValues;
}
inline bool Downstream_OneMessage::has_request_values() const {
  return _internal_has_request_values();
}
inline void Downstream_OneMessage::set_has_request_values() {
  _oneof_case_[0] = kRequestValues;
}
inline void Downstream_OneMessage::clear_request_values() {
  if (_internal_has_request_values()) {
    if (GetArena() == nullptr) {
      delete sub_message_.request_values_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Downstream_RequestValues* Downstream_OneMessage::release_request_values() {
  // @@protoc_insertion_point(field_release:robot_interface.Downstream.OneMessage.request_values)
  if (_internal_has_request_values()) {
    clear_has_sub_message();
      ::robot_interface::Downstream_RequestValues* temp = sub_message_.request_values_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.request_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Downstream_RequestValues& Downstream_OneMessage::_internal_request_values() const {
  return _internal_has_request_values()
      ? *sub_message_.request_values_
      : *reinterpret_cast< ::robot_interface::Downstream_RequestValues*>(&::robot_interface::_Downstream_RequestValues_default_instance_);
}
inline const ::robot_interface::Downstream_RequestValues& Downstream_OneMessage::request_values() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.OneMessage.request_values)
  return _internal_request_values();
}
inline ::robot_interface::Downstream_RequestValues* Downstream_OneMessage::unsafe_arena_release_request_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Downstream.OneMessage.request_values)
  if (_internal_has_request_values()) {
    clear_has_sub_message();
    ::robot_interface::Downstream_RequestValues* temp = sub_message_.request_values_;
    sub_message_.request_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Downstream_OneMessage::unsafe_arena_set_allocated_request_values(::robot_interface::Downstream_RequestValues* request_values) {
  clear_sub_message();
  if (request_values) {
    set_has_request_values();
    sub_message_.request_values_ = request_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Downstream.OneMessage.request_values)
}
inline ::robot_interface::Downstream_RequestValues* Downstream_OneMessage::_internal_mutable_request_values() {
  if (!_internal_has_request_values()) {
    clear_sub_message();
    set_has_request_values();
    sub_message_.request_values_ = CreateMaybeMessage< ::robot_interface::Downstream_RequestValues >(GetArena());
  }
  return sub_message_.request_values_;
}
inline ::robot_interface::Downstream_RequestValues* Downstream_OneMessage::mutable_request_values() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Downstream.OneMessage.request_values)
  return _internal_mutable_request_values();
}

// .robot_interface.Downstream.SetAxisRobotArm set_axis_robot_arm = 3;
inline bool Downstream_OneMessage::_internal_has_set_axis_robot_arm() const {
  return sub_message_case() == kSetAxisRobotArm;
}
inline bool Downstream_OneMessage::has_set_axis_robot_arm() const {
  return _internal_has_set_axis_robot_arm();
}
inline void Downstream_OneMessage::set_has_set_axis_robot_arm() {
  _oneof_case_[0] = kSetAxisRobotArm;
}
inline void Downstream_OneMessage::clear_set_axis_robot_arm() {
  if (_internal_has_set_axis_robot_arm()) {
    if (GetArena() == nullptr) {
      delete sub_message_.set_axis_robot_arm_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Downstream_SetAxisRobotArm* Downstream_OneMessage::release_set_axis_robot_arm() {
  // @@protoc_insertion_point(field_release:robot_interface.Downstream.OneMessage.set_axis_robot_arm)
  if (_internal_has_set_axis_robot_arm()) {
    clear_has_sub_message();
      ::robot_interface::Downstream_SetAxisRobotArm* temp = sub_message_.set_axis_robot_arm_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.set_axis_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Downstream_SetAxisRobotArm& Downstream_OneMessage::_internal_set_axis_robot_arm() const {
  return _internal_has_set_axis_robot_arm()
      ? *sub_message_.set_axis_robot_arm_
      : *reinterpret_cast< ::robot_interface::Downstream_SetAxisRobotArm*>(&::robot_interface::_Downstream_SetAxisRobotArm_default_instance_);
}
inline const ::robot_interface::Downstream_SetAxisRobotArm& Downstream_OneMessage::set_axis_robot_arm() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.OneMessage.set_axis_robot_arm)
  return _internal_set_axis_robot_arm();
}
inline ::robot_interface::Downstream_SetAxisRobotArm* Downstream_OneMessage::unsafe_arena_release_set_axis_robot_arm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Downstream.OneMessage.set_axis_robot_arm)
  if (_internal_has_set_axis_robot_arm()) {
    clear_has_sub_message();
    ::robot_interface::Downstream_SetAxisRobotArm* temp = sub_message_.set_axis_robot_arm_;
    sub_message_.set_axis_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Downstream_OneMessage::unsafe_arena_set_allocated_set_axis_robot_arm(::robot_interface::Downstream_SetAxisRobotArm* set_axis_robot_arm) {
  clear_sub_message();
  if (set_axis_robot_arm) {
    set_has_set_axis_robot_arm();
    sub_message_.set_axis_robot_arm_ = set_axis_robot_arm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Downstream.OneMessage.set_axis_robot_arm)
}
inline ::robot_interface::Downstream_SetAxisRobotArm* Downstream_OneMessage::_internal_mutable_set_axis_robot_arm() {
  if (!_internal_has_set_axis_robot_arm()) {
    clear_sub_message();
    set_has_set_axis_robot_arm();
    sub_message_.set_axis_robot_arm_ = CreateMaybeMessage< ::robot_interface::Downstream_SetAxisRobotArm >(GetArena());
  }
  return sub_message_.set_axis_robot_arm_;
}
inline ::robot_interface::Downstream_SetAxisRobotArm* Downstream_OneMessage::mutable_set_axis_robot_arm() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Downstream.OneMessage.set_axis_robot_arm)
  return _internal_mutable_set_axis_robot_arm();
}

// .robot_interface.Downstream.ClearQueueRobotArm clear_queue_robot_arm = 4;
inline bool Downstream_OneMessage::_internal_has_clear_queue_robot_arm() const {
  return sub_message_case() == kClearQueueRobotArm;
}
inline bool Downstream_OneMessage::has_clear_queue_robot_arm() const {
  return _internal_has_clear_queue_robot_arm();
}
inline void Downstream_OneMessage::set_has_clear_queue_robot_arm() {
  _oneof_case_[0] = kClearQueueRobotArm;
}
inline void Downstream_OneMessage::clear_clear_queue_robot_arm() {
  if (_internal_has_clear_queue_robot_arm()) {
    if (GetArena() == nullptr) {
      delete sub_message_.clear_queue_robot_arm_;
    }
    clear_has_sub_message();
  }
}
inline ::robot_interface::Downstream_ClearQueueRobotArm* Downstream_OneMessage::release_clear_queue_robot_arm() {
  // @@protoc_insertion_point(field_release:robot_interface.Downstream.OneMessage.clear_queue_robot_arm)
  if (_internal_has_clear_queue_robot_arm()) {
    clear_has_sub_message();
      ::robot_interface::Downstream_ClearQueueRobotArm* temp = sub_message_.clear_queue_robot_arm_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_message_.clear_queue_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_interface::Downstream_ClearQueueRobotArm& Downstream_OneMessage::_internal_clear_queue_robot_arm() const {
  return _internal_has_clear_queue_robot_arm()
      ? *sub_message_.clear_queue_robot_arm_
      : *reinterpret_cast< ::robot_interface::Downstream_ClearQueueRobotArm*>(&::robot_interface::_Downstream_ClearQueueRobotArm_default_instance_);
}
inline const ::robot_interface::Downstream_ClearQueueRobotArm& Downstream_OneMessage::clear_queue_robot_arm() const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.OneMessage.clear_queue_robot_arm)
  return _internal_clear_queue_robot_arm();
}
inline ::robot_interface::Downstream_ClearQueueRobotArm* Downstream_OneMessage::unsafe_arena_release_clear_queue_robot_arm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_interface.Downstream.OneMessage.clear_queue_robot_arm)
  if (_internal_has_clear_queue_robot_arm()) {
    clear_has_sub_message();
    ::robot_interface::Downstream_ClearQueueRobotArm* temp = sub_message_.clear_queue_robot_arm_;
    sub_message_.clear_queue_robot_arm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Downstream_OneMessage::unsafe_arena_set_allocated_clear_queue_robot_arm(::robot_interface::Downstream_ClearQueueRobotArm* clear_queue_robot_arm) {
  clear_sub_message();
  if (clear_queue_robot_arm) {
    set_has_clear_queue_robot_arm();
    sub_message_.clear_queue_robot_arm_ = clear_queue_robot_arm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_interface.Downstream.OneMessage.clear_queue_robot_arm)
}
inline ::robot_interface::Downstream_ClearQueueRobotArm* Downstream_OneMessage::_internal_mutable_clear_queue_robot_arm() {
  if (!_internal_has_clear_queue_robot_arm()) {
    clear_sub_message();
    set_has_clear_queue_robot_arm();
    sub_message_.clear_queue_robot_arm_ = CreateMaybeMessage< ::robot_interface::Downstream_ClearQueueRobotArm >(GetArena());
  }
  return sub_message_.clear_queue_robot_arm_;
}
inline ::robot_interface::Downstream_ClearQueueRobotArm* Downstream_OneMessage::mutable_clear_queue_robot_arm() {
  // @@protoc_insertion_point(field_mutable:robot_interface.Downstream.OneMessage.clear_queue_robot_arm)
  return _internal_mutable_clear_queue_robot_arm();
}

inline bool Downstream_OneMessage::has_sub_message() const {
  return sub_message_case() != SUB_MESSAGE_NOT_SET;
}
inline void Downstream_OneMessage::clear_has_sub_message() {
  _oneof_case_[0] = SUB_MESSAGE_NOT_SET;
}
inline Downstream_OneMessage::SubMessageCase Downstream_OneMessage::sub_message_case() const {
  return Downstream_OneMessage::SubMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Downstream

// repeated .robot_interface.Downstream.OneMessage messages = 1;
inline int Downstream::_internal_messages_size() const {
  return messages_.size();
}
inline int Downstream::messages_size() const {
  return _internal_messages_size();
}
inline void Downstream::clear_messages() {
  messages_.Clear();
}
inline ::robot_interface::Downstream_OneMessage* Downstream::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:robot_interface.Downstream.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Downstream_OneMessage >*
Downstream::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:robot_interface.Downstream.messages)
  return &messages_;
}
inline const ::robot_interface::Downstream_OneMessage& Downstream::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::robot_interface::Downstream_OneMessage& Downstream::messages(int index) const {
  // @@protoc_insertion_point(field_get:robot_interface.Downstream.messages)
  return _internal_messages(index);
}
inline ::robot_interface::Downstream_OneMessage* Downstream::_internal_add_messages() {
  return messages_.Add();
}
inline ::robot_interface::Downstream_OneMessage* Downstream::add_messages() {
  // @@protoc_insertion_point(field_add:robot_interface.Downstream.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_interface::Downstream_OneMessage >&
Downstream::messages() const {
  // @@protoc_insertion_point(field_list:robot_interface.Downstream.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_interface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::robot_interface::Upstream_Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robot_interface::Upstream_Error>() {
  return ::robot_interface::Upstream_Error_descriptor();
}
template <> struct is_proto_enum< ::robot_interface::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robot_interface::DeviceType>() {
  return ::robot_interface::DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotInterface_2eproto
